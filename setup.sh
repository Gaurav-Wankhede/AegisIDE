#!/bin/bash
# AegisIDE Framework Setup Script v3.1.0
# Automated installation for Windsurf, Cursor, VS Code

set -e  # Exit on error

echo "🤖 AegisIDE Framework Setup v3.1.0"
echo "======================================"
echo ""

# Detect OS
OS="$(uname -s)"
case "${OS}" in
    Linux*)     PLATFORM=Linux;;
    Darwin*)    PLATFORM=Mac;;
    MINGW*|MSYS*|CYGWIN*)    PLATFORM=Windows;;
    *)          PLATFORM="UNKNOWN:${OS}"
esac

echo "📋 Detected Platform: ${PLATFORM}"
echo ""

# Detect IDE
IDE_TYPE=""
if [ -d "${HOME}/.windsurf" ]; then
    IDE_TYPE="windsurf"
    IDE_PATH="${HOME}/.windsurf"
    echo "✓ Windsurf IDE detected"
elif [ -d "${HOME}/.cursor" ]; then
    IDE_TYPE="cursor"
    IDE_PATH="${HOME}/.cursor"
    echo "✓ Cursor IDE detected"
elif [ -d "${HOME}/.vscode" ]; then
    IDE_TYPE="vscode"
    IDE_PATH="${HOME}/.vscode"
    echo "✓ VS Code detected"
else
    echo "⚠️  No IDE detected. Please select:"
    echo "1) Windsurf"
    echo "2) Cursor"
    echo "3) VS Code"
    read -p "Enter choice (1-3): " ide_choice
    case ${ide_choice} in
        1) IDE_TYPE="windsurf"; IDE_PATH="${HOME}/.windsurf";;
        2) IDE_TYPE="cursor"; IDE_PATH="${HOME}/.cursor";;
        3) IDE_TYPE="vscode"; IDE_PATH="${HOME}/.vscode";;
        *) echo "❌ Invalid choice"; exit 1;;
    esac
fi

echo ""
echo "🔧 Installing to: ${IDE_PATH}/aegiside"
echo ""

# Create directory structure
echo "📁 Creating directory structure..."
mkdir -p "${IDE_PATH}/aegiside"
mkdir -p "${IDE_PATH}/rules"
mkdir -p "${IDE_PATH}/workflow"

# Copy framework files (IMPORTANT: Copy not symlink)
echo "📦 Copying AegisIDE framework files..."
cp -r src/.aegiside/* "${IDE_PATH}/aegiside/"
cp -r src/rules/* "${IDE_PATH}/rules/"
cp -r src/workflow/* "${IDE_PATH}/workflow/"

echo "✓ Framework files copied"
echo ""

# Verify memory-bank is clean
echo "🧹 Verifying memory-bank is clean..."
MEMORY_BANK="${IDE_PATH}/aegiside/memory-bank"
JSON_COUNT=$(find "${MEMORY_BANK}" -name "*.json" -not -name "RL_SCORING_EXAMPLE.json" | wc -l)

if [ ${JSON_COUNT} -gt 0 ]; then
    echo "⚠️  Found ${JSON_COUNT} JSON files in memory-bank (should be 0)"
    echo "   These will be generated by /init workflow"
fi

echo "✓ Memory-bank clean"
echo ""

# Configure MCP servers
echo "🔌 Configuring MCP servers..."
MCP_CONFIG="${HOME}/mcp_servers.json"

if [ -f "${MCP_CONFIG}" ]; then
    echo "⚠️  MCP config already exists at ${MCP_CONFIG}"
    read -p "   Overwrite? (y/N): " overwrite
    if [ "${overwrite}" = "y" ] || [ "${overwrite}" = "Y" ]; then
        cp src/mcp_servers.json "${MCP_CONFIG}"
        echo "✓ MCP config updated"
    else
        echo "⊘ Keeping existing config"
    fi
else
    cp src/mcp_servers.json "${MCP_CONFIG}"
    echo "✓ MCP config created"
fi

echo ""

# Check prerequisites
echo "🔍 Checking prerequisites..."

# Check Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    echo "✓ Node.js ${NODE_VERSION}"
else
    echo "❌ Node.js not found (required for MCP servers)"
    echo "   Install from: https://nodejs.org/"
fi

# Check Python
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version)
    echo "✓ ${PYTHON_VERSION}"
else
    echo "⚠️  Python not found (optional, for Python MCPs)"
fi

# Check uvx
if command -v uvx &> /dev/null; then
    echo "✓ uvx (for Python MCPs)"
else
    echo "⚠️  uvx not found (optional, for Python MCPs)"
    echo "   Install: curl -LsSf https://astral.sh/uv/install.sh | sh"
fi

echo ""

# Test MCP servers
echo "🧪 Testing MCP servers..."

# Test context7
if npx -y @upstash/context7-mcp@latest --version &> /dev/null; then
    echo "✓ context7 MCP working"
else
    echo "⚠️  context7 MCP test failed"
fi

# Test filesystem
if npx -y @modelcontextprotocol/server-filesystem --help &> /dev/null; then
    echo "✓ filesystem MCP working"
else
    echo "⚠️  filesystem MCP test failed"
fi

echo ""

# Final instructions
echo "✅ AegisIDE Setup Complete!"
echo ""
echo "📚 Next Steps:"
echo "   1. Open your IDE (${IDE_TYPE})"
echo "   2. Start AI assistant"
echo "   3. Type: /init"
echo "   4. AI will auto-generate 8 memory-bank files"
echo ""
echo "📖 For detailed instructions, see: INSTALLATION.md"
echo "🔧 For troubleshooting, see: INSTALLATION.md#troubleshooting"
echo ""
echo "🎉 Happy autonomous coding!"
