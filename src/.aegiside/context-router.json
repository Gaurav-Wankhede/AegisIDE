{
  "meta_version": "1.0.0",
  "description": "Lazy-Loading Hierarchical Context Tree (LLHCT) Router - Single Source of Truth",
  "bootstrap_initialization": {
    "description": "First-time setup: Auto-download from GitHub, detect IDE, create structure",
    "github_repo": "https://github.com/Gaurav-Wankhede/AegisIDE.git",
    "ide_detection": {
      "method": "Check MCP config paths and environment",
      "paths": [
        {"ide": "windsurf", "check": "~/.codeium/windsurf-next/mcp_config.json", "folder": ".windsurf"},
        {"ide": "cursor", "check": "~/.cursor/mcp_config.json", "folder": ".cursor"},
        {"ide": "vscode", "check": "~/.vscode/extensions", "folder": ".vscode"},
        {"ide": "cline", "check": "~/.cline", "folder": ".cline"}
      ],
      "fallback": "windsurf"
    },
    "initialization_workflow": [
      "1. Detect IDE type via MCP config path checks",
      "2. Check if {IDE}/.aegiside/context-router.json exists",
      "3. If NOT exists: Clone GitHub repo to /tmp/aegiside-setup/",
      "4. Copy src/.aegiside/ → {IDE}/.aegiside/",
      "5. Copy src/rules/ → {IDE}/rules/",
      "6. Copy src/workflow/ → {IDE}/workflow/",
      "7. Initialize 8-schema memory bank from templates",
      "8. Verify constitution files exist (42 articles)",
      "9. Create global_rules.md in IDE config folder",
      "10. Cleanup /tmp/aegiside-setup/"
    ],
    "commands": {
      "clone": "git clone --depth 1 https://github.com/Gaurav-Wankhede/AegisIDE.git /tmp/aegiside-setup",
      "copy_aegiside": "cp -r /tmp/aegiside-setup/src/.aegiside {IDE}/",
      "copy_rules": "cp -r /tmp/aegiside-setup/src/rules {IDE}/",
      "copy_workflows": "cp -r /tmp/aegiside-setup/src/workflow {IDE}/",
      "cleanup": "rm -rf /tmp/aegiside-setup"
    },
    "verification": {
      "required_files": [
        "{IDE}/.aegiside/context-router.json",
        "{IDE}/.aegiside/memory-bank/activeContext.json",
        "{IDE}/.aegiside/memory-bank/scratchpad.json",
        "{IDE}/.aegiside/memory-bank/kanban.json",
        "{IDE}/.aegiside/memory-bank/mistakes.json",
        "{IDE}/.aegiside/memory-bank/systemPatterns.json",
        "{IDE}/.aegiside/memory-bank/progress.json",
        "{IDE}/.aegiside/memory-bank/roadmap.json",
        "{IDE}/.aegiside/memory-bank/memory.json",
        "{IDE}/.aegiside/schemas/activeContext.schema.json",
        "{IDE}/.aegiside/schemas/scratchpad.schema.json",
        "{IDE}/.aegiside/schemas/kanban.schema.json",
        "{IDE}/.aegiside/schemas/mistakes.schema.json",
        "{IDE}/.aegiside/schemas/systemPatterns.schema.json",
        "{IDE}/.aegiside/schemas/progress.schema.json",
        "{IDE}/.aegiside/schemas/roadmap.schema.json",
        "{IDE}/.aegiside/schemas/memory.schema.json",
        "{IDE}/rules/constitution/01-preamble/preamble.md",
        "{IDE}/workflow/next.md"
      ],
      "on_failure": "Retry clone OR manual download from GitHub releases"
    },
    "auto_trigger": "session_start when memory_bank_exists() == false"
  },
  "system_paths": {
    "root": "{IDE}/.aegiside/",
    "schemas": "{IDE}/.aegiside/schemas/",
    "helpers": "{IDE}/.aegiside/schemas/helpers/",
    "constitution": "{IDE}/rules/constitution/",
    "laws": "{IDE}/rules/laws/",
    "workflows": "{IDE}/workflow/",
    "memory_bank": "{IDE}/.aegiside/memory-bank/",
    "mcp_config": "~/.codeium/windsurf-next/mcp_config.json"
  },
  "memory_bank_files": [
    "activeContext.json",
    "scratchpad.json",
    "kanban.json",
    "mistakes.json",
    "systemPatterns.json",
    "progress.json",
    "roadmap.json",
    "memory.json"
  ],
  "schema_files": [
    "activeContext.schema.json",
    "scratchpad.schema.json",
    "kanban.schema.json",
    "mistakes.schema.json",
    "systemPatterns.schema.json",
    "progress.schema.json",
    "roadmap.schema.json",
    "memory.schema.json"
  ],
  "helper_files": {
    "common_mistakes": "common-mistakes.json",
    "error_recovery": "error-recovery.json",
    "tool_patterns": "tool-usage-patterns.json",
    "constitutional_governance": "constitutional-governance.json",
    "schema_evolution": "schema-evolution.json"
  },
  "workflow_slash_commands": [
    "/bootstrap",
    "/continue",
    "/fix",
    "/init",
    "/memory-status",
    "/next",
    "/optimize",
    "/oversight-checks-and-balances",
    "/research",
    "/status",
    "/update",
    "/validate"
  ],
  "workflow_invocation_note": "Workflows are invoked directly as slash commands (e.g., /fix, /next), NOT loaded as markdown files. Each workflow auto-executes its MCP chain autonomously.",
  "law_files": {
    "description": "Project-specific rules and conventions",
    "examples": {
      "coding_standards": "coding-conventions.md",
      "architecture_decisions": "architecture-rules.md",
      "naming_conventions": "naming-standards.md",
      "git_workflow": "git-commit-standards.md",
      "testing_requirements": "testing-standards.md",
      "security_policies": "security-rules.md"
    },
    "note": "Laws are project-specific, Constitution is universal across all AegisIDE projects"
  },
  "constitutional_structure": {
    "01-preamble": {"file": "preamble.md", "articles": 0},
    "02-preliminary": {"articles": [1, 2, 3]},
    "03-fundamental-rights": {"articles": [4, 5, 6, 7, 8, 9, 10, 11, 12]},
    "04-fundamental-duties": {"articles": [13, 14, 15, 16, 17, 18, 19]},
    "05-dpsp": {"articles": [20, 21, 22, 23, 24, 25]},
    "06-parliament": {"articles": [26, 27, 28, 29, 30, 31]},
    "07-executive": {"articles": [32, 33, 34, 35]},
    "08-judiciary": {"articles": [36, 37, 38]},
    "09-constitutional-bodies": {"articles": [39, 40, 41, 42]}
  },
  "constitutional_roles": {
    "chief_justice": {
      "authority": "Constitutional Guardian",
      "workflows": ["/validate", "/fix"],
      "powers": ["HALT", "veto", "tribunal", "approval_gate"],
      "articles": [32, 36, 37, 38]
    },
    "prime_minister": {
      "authority": "Execution Leader",
      "workflows": ["/next", "/continue"],
      "powers": ["task_assignment", "resource_allocation"],
      "articles": [33]
    },
    "ias": {
      "authority": "Administrative Service",
      "workflows": ["/research", "/status", "/update", "/bootstrap"],
      "powers": ["intelligence", "schema_management", "compliance_audit"],
      "articles": [39]
    },
    "shadow_cabinet": {
      "authority": "Constitutional Opposition",
      "workflows": ["/oversight-checks-and-balances", "/validate"],
      "powers": ["challenge", "audit", "alternative_proposal"],
      "articles": [40]
    }
  },
  "nlu_patterns": {
    "error": ["error", "bug", "broken", "failing", "exception", "crash", "issue"],
    "feature": ["add", "create", "build", "implement", "new", "feature", "develop"],
    "validate": ["test", "check", "validate", "verify", "ensure", "confirm"],
    "optimize": ["slow", "optimize", "faster", "performance", "speed", "improve"],
    "status": ["status", "health", "progress", "state", "report", "summary"],
    "research": ["how", "what", "why", "explain", "research", "learn", "understand"]
  },
  "intent_mapping": {
    "error": {
      "workflows": ["/fix"],
      "articles": [5, 15],
      "priority": 1,
      "mcps_required": ["filesystem", "context7", "sequential-thinking", "git"],
      "rl_base_reward": 15,
      "rl_penalty": -30
    },
    "feature": {
      "workflows": ["/research", "/next"],
      "articles": [4, 17, 23],
      "priority": 2,
      "mcps_required": ["context7", "exa", "filesystem", "memory", "git"],
      "rl_base_reward": 30,
      "rl_penalty": -10
    },
    "validate": {
      "workflows": ["/validate"],
      "articles": [5, 15],
      "priority": 1,
      "mcps_required": ["filesystem", "git"],
      "rl_base_reward": 15,
      "rl_penalty": -30
    },
    "optimize": {
      "workflows": ["/optimize"],
      "articles": [20, 25],
      "priority": 3,
      "mcps_required": ["math", "sequential-thinking", "filesystem"],
      "rl_base_reward": 25,
      "rl_penalty": -15
    },
    "status": {
      "workflows": ["/status"],
      "articles": [16],
      "priority": 3,
      "mcps_required": ["filesystem", "math"],
      "rl_base_reward": 10,
      "rl_penalty": 0
    },
    "init": {
      "workflows": ["/init"],
      "articles": [1, 2, 3],
      "priority": 1,
      "mcps_required": ["filesystem", "memory", "time", "math"],
      "rl_base_reward": 10,
      "rl_penalty": -15
    },
    "continue": {
      "workflows": ["/continue"],
      "articles": [6, 14],
      "priority": 1,
      "mcps_required": ["filesystem", "memory", "time"],
      "rl_base_reward": 5,
      "rl_penalty": -10
    },
    "bootstrap": {
      "workflows": ["/bootstrap"],
      "articles": [14],
      "priority": 1,
      "mcps_required": ["filesystem", "time", "git", "memory"],
      "rl_base_reward": 10,
      "rl_penalty": -15
    },
    "update": {
      "workflows": ["/update"],
      "articles": [14],
      "priority": 2,
      "mcps_required": ["filesystem", "time", "math", "git"],
      "rl_base_reward": 8,
      "rl_penalty": -20
    },
    "oversight": {
      "workflows": ["/oversight-checks-and-balances"],
      "articles": [26, 27, 28, 29],
      "priority": 2,
      "mcps_required": ["sequential-thinking", "math", "memory", "filesystem"],
      "rl_base_reward": 25,
      "rl_penalty": -20
    },
    "memory_status": {
      "workflows": ["/memory-status"],
      "articles": [10, 42],
      "priority": 3,
      "mcps_required": ["memory", "filesystem", "math"],
      "rl_base_reward": 5,
      "rl_penalty": -10
    }
  },
  "auto_triggers": {
    "session_start": {
      "check": "memory_bank_exists",
      "if_false": "/init",
      "load_articles": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
      "load_mode": "selective"
    },
    "every_5_ops": {
      "trigger": "memory_anchor",
      "actions": [
        "@mcp:filesystem read activeContext.json",
        "operation_counter += 1",
        "@mcp:filesystem read scratchpad[0].title",
        "@mcp:filesystem read activeContext.task_history[-10:]",
        "@mcp:filesystem read progress.total_rl_score",
        "@mcp:time update last_memory_anchor"
      ]
    },
    "task_complete": {
      "actions": [
        "generate_summary",
        "calculate_rl_score",
        "update_8_schemas_atomic",
        "@mcp:git commit"
      ],
      "summary_format": {
        "task_id": "string",
        "title": "max_50_chars",
        "outcome": "success|partial|failed",
        "key_changes": "array_max_3",
        "rl_impact": "string",
        "timestamp": "iso8601"
      }
    },
    "error_detected": {
      "workflow": "/fix",
      "articles": [5, 15],
      "halt": true,
      "rl_penalty": -30
    }
  },
  "rl_calculation": {
    "central_ledger": "{IDE}/.aegiside/memory-bank/progress.json",
    "formula_patterns": {
      "consensus": "eval(f'({exec} * 0.3) + ({admin} * 0.3) + ({opp} * 0.3) + ({judicial} * 0.1)')",
      "compliance": "eval(f'({structural}/25 + {procedural}/25 + {quality}/25 + {learning}/25) * 100')",
      "autonomy": "min(100, base_autonomy + (success_rate * 10) - (violations * 5))",
      "total_rl": "sum([tx['reward'] for tx in progress['rl_transactions']])"
    },
    "rewards": {
      "task_completed": {"min": 20, "max": 50},
      "validation_passed": 15,
      "pattern_reused": 20,
      "mcp_chain_complete": 10,
      "high_quality_code": 10,
      "research_with_solution": 30
    },
    "penalties": {
      "missing_mcp": -15,
      "skip_schema_update": -30,
      "ask_permission_0_99": -20,
      "research_without_implementation": -10,
      "validation_failure": -30,
      "repeated_error_3rd": -50,
      "duplicate_file_creation": -20
    },
    "exploit_explore": {
      "exploit_ratio": 0.7,
      "explore_ratio": 0.3,
      "pattern_confidence_threshold": 0.9
    },
    "sources": {
      "mistakes.json": "penalties",
      "systemPatterns.json": "rewards",
      "activeContext.json": "mcp_rewards",
      "memory.json": "pattern_reuse_rewards"
    }
  },
  "execution_rules": {
    "autonomy_band": "0-99%",
    "high_risk_requires_approval": ["database_mutations", "production_deploy", "delete_5plus_files", "git_force", "security_changes"],
    "forbidden_actions": ["ask_permission_0_99", "wait_for_slash", "stop_after_one", "research_alone"],
    "mandatory_chain": ["prerequisites", "detect_intent", "load_router", "invoke_workflows", "load_articles", "update_schemas", "git_commit", "rl_scoring", "memory_anchor_check", "immediate_next"]
  },
  "memory_bank_management": {
    "description": "Strict MCP usage rules for memory bank operations",
    "read_operations": {
      "tool": "@mcp:json-jq",
      "rule": "ALWAYS use @mcp:json-jq for reading memory bank files",
      "forbidden": ["@mcp:filesystem read", "direct file read", "other MCPs"],
      "examples": [
        "@mcp:json-jq query '$.session.autonomy_level' from 'activeContext.json'",
        "@mcp:json-jq query '$.priority_queue[0]' from 'scratchpad.json'",
        "@mcp:json-jq query '$.rl_totals' from 'progress.json'"
      ]
    },
    "write_operations": {
      "tool": "@mcp:filesystem",
      "rule": "ALWAYS use @mcp:filesystem for editing memory bank files",
      "forbidden": ["@mcp:json-jq write", "direct file write", "other MCPs"],
      "methods": ["write", "edit", "update"],
      "validation": "Schema validation required after every write"
    },
    "enforcement": {
      "violation_penalty": -30,
      "log_to": "mistakes.json",
      "constitutional_article": 13
    }
  },
  "mcp_integration": {
    "global_config": "~/.codeium/windsurf-next/mcp_config.json",
    "project_template": "{IDE}/mcp_servers.json",
    "always_active": ["filesystem", "json-jq", "sequential-thinking", "memory", "git"],
    "on_demand": {
      "context7": ["error_detected", "new_feature", "library_integration"],
      "exa": ["research_task", "code_examples"],
      "fetch": ["external_data", "benchmarks"],
      "time": ["timestamp_required"],
      "math": ["complex_calculation"]
    },
    "eliminated": {
      "time": "use terminal: date '+%Y-%m-%dT%H:%M:%S%z'",
      "math": "use Python: eval(formula)"
    },
    "usage_pattern_file": "helpers/tool-usage-patterns.json",
    "query_patterns": {
      "router": "@mcp:json-jq query '$.intent_mapping.{intent}' from 'context-router.json'",
      "memory_bank": "@mcp:json-jq query '$.session.autonomy_level' from 'activeContext.json'",
      "schemas": "@mcp:filesystem read {IDE}/.aegiside/schemas/{schema_name}"
    }
  },
  "atomic_update_chain": {
    "description": "8-schema atomic update with cross-file validation",
    "order": [
      "progress.json",
      "activeContext.json",
      "scratchpad.json",
      "kanban.json",
      "mistakes.json",
      "systemPatterns.json",
      "roadmap.json",
      "memory.json"
    ],
    "validation": {
      "against": "schemas/*.schema.json",
      "integrity_check": "schemas/schema-integrity-validator.json",
      "evolution": "helpers/schema-evolution.json"
    },
    "on_error": {
      "workflow": "/fix",
      "helper": "helpers/error-recovery.json",
      "role": "chief_justice"
    }
  },
  "workflow_execution": {
    "pre_execution": {
      "load_helpers": ["common-mistakes.json", "tool-usage-patterns.json"],
      "check_schemas": true,
      "verify_mcp_servers": true
    },
    "post_execution": {
      "atomic_schema_update": true,
      "rl_scoring": true,
      "git_commit": true,
      "approval_gate": "chief_justice + shadow_cabinet"
    }
  },
  "dynamic_loading": {
    "workflows": "Invoke directly as slash commands (e.g., /fix, /next) - NOT file loading",
    "articles": "Load only articles specified in intent_mapping[intent].articles",
    "helpers": "Load helpers dynamically based on error type or workflow needs",
    "schemas": "Validate against schemas/*.schema.json on every update",
    "governance": "Load helpers/constitutional-governance.json for parliamentary decisions"
  },
  "article_path_mapping": {
    "description": "Convert article number to actual file path",
    "logic": {
      "1-3": "02-preliminary/article-{num}.md",
      "4-12": "03-fundamental-rights/article-{num}.md",
      "13-19": "04-fundamental-duties/article-{num}.md",
      "20-25": "05-dpsp/article-{num}.md",
      "26-31": "06-parliament/article-{num}.md",
      "32-35": "07-executive/article-{num}.md",
      "36-38": "08-judiciary/article-{num}.md",
      "39-42": "09-constitutional-bodies/article-{num}.md"
    },
    "base_path": "{IDE}/rules/constitution/"
  },
  "helper_loading_triggers": {
    "common-mistakes.json": {
      "when": ["pre_execution", "error_detected"],
      "purpose": "Prevent known errors before they occur",
      "always_load": true
    },
    "error-recovery.json": {
      "when": ["error_detected", "validation_failure"],
      "purpose": "Recovery protocols for specific error types",
      "always_load": false
    },
    "tool-usage-patterns.json": {
      "when": ["pre_execution"],
      "purpose": "MCP best practices and usage patterns",
      "always_load": true
    },
    "constitutional-governance.json": {
      "when": ["parliamentary_decision", "consensus_calculation", "approval_gate"],
      "purpose": "Democratic decision-making protocols",
      "always_load": false
    },
    "schema-evolution.json": {
      "when": ["schema_migration", "version_upgrade"],
      "purpose": "Safe schema migration protocols",
      "always_load": false
    }
  },
  "cross_schema_linkage": {
    "description": "Standardized keys for cross-file references",
    "linkage_keys": {
      "proposal_id": {
        "format": "proposal-YYYYMMDD-NNN",
        "links": ["scratchpad", "systemPatterns", "progress", "memory"],
        "purpose": "Track proposals through research, implementation, and RL scoring"
      },
      "kanban_task_id": {
        "format": "task-YYYYMMDD-NNN",
        "links": ["scratchpad", "kanban", "activeContext", "progress"],
        "purpose": "Track task lifecycle from todo to approved"
      },
      "error_id": {
        "format": "error-YYYYMMDD-NNN",
        "links": ["mistakes", "progress", "activeContext"],
        "purpose": "Link error patterns to RL penalties and prevention"
      },
      "pattern_id": {
        "format": "pattern-YYYYMMDD-NNN",
        "links": ["systemPatterns", "memory", "progress"],
        "purpose": "Track pattern usage, reuse count, and RL rewards"
      },
      "tx_id": {
        "format": "tx-TIMESTAMP-NNNNN",
        "links": ["progress"],
        "purpose": "Unique RL transaction identifier (single source)"
      }
    },
    "validation": "All cross-references must exist in linked schemas"
  },
  "mcp_fallback_strategy": {
    "description": "Resilience when MCP servers fail",
    "fallback_chains": {
      "context7": ["fetch", "memory_patterns", "halt_if_critical"],
      "fetch": ["context7", "memory_patterns", "continue_with_degraded"],
      "memory": ["filesystem_json_read", "halt_if_critical"],
      "filesystem": ["halt_immediately"],
      "git": ["manual_commit_required", "continue_workflow"]
    },
    "error_handling": {
      "rate_limit": "Exponential backoff: 1s, 2s, 4s, 8s",
      "timeout": "Retry once, then fallback",
      "unavailable": "Load error-recovery.json for alternative approach"
    },
    "critical_mcps": ["filesystem", "memory"],
    "degraded_mode": "Continue with available MCPs, log issues to mistakes.json"
  },
  "approval_gate_flow": {
    "description": "Chief Justice + Shadow Cabinet verification before task approval",
    "kanban_lifecycle": {
      "todo": "Task queued in scratchpad, not started",
      "in_progress": "Task actively being executed by workflows",
      "done": "Task completed, awaiting approval gate",
      "approved": "Task approved by CJ + Shadow Cabinet, RL scored"
    },
    "approval_process": {
      "step_1": "Task moves to kanban.done after workflow completion",
      "step_2": "Shadow Cabinet reviews (Article 29): Quality + Innovation + Analytics",
      "step_3": "Chief Justice validates (Article 32): Constitutional compliance + MCP trail + RL accuracy",
      "step_4_pass": "Both approve → kanban.approved + final RL to progress.json",
      "step_4_fail": "Either fails → kanban.todo + mistakes.json + remediation required"
    },
    "verification_criteria": {
      "shadow_cabinet": ["code_quality", "EMD_compliance", "test_coverage", "approach_validity"],
      "chief_justice": ["constitutional_compliance", "mcp_trail_complete", "rl_calculation_correct", "schema_valid"]
    },
    "timeout": "24 hours in done status triggers auto-escalation to Parliament"
  }
}
