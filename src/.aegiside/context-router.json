{
  "meta_version": "1.0.0",
  "description": "Lazy-Loading Hierarchical Context Tree (LLHCT) Router - Single Source of Truth",
  "constitution": {
    "description": "Supreme law - ALL operations governed by constitutional framework",
    "location": "{IDE}/rules/constitution/",
    "structure": {
      "preamble": "{IDE}/rules/constitution/01-preamble/preamble.md",
      "preliminary": [
        "{IDE}/rules/constitution/02-preliminary/article-1.md",
        "{IDE}/rules/constitution/02-preliminary/article-2.md",
        "{IDE}/rules/constitution/02-preliminary/article-3.md"
      ],
      "fundamental_rights": [
        "{IDE}/rules/constitution/03-fundamental-rights/article-4.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-5.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-6.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-7.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-8.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-9.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-10.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-11.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-12.md"
      ],
      "fundamental_duties": [
        "{IDE}/rules/constitution/04-fundamental-duties/article-13.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-14.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-15.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-16.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-17.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-18.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-19.md"
      ],
      "dpsp": [
        "{IDE}/rules/constitution/05-dpsp/article-20.md",
        "{IDE}/rules/constitution/05-dpsp/article-21.md",
        "{IDE}/rules/constitution/05-dpsp/article-22.md",
        "{IDE}/rules/constitution/05-dpsp/article-23.md",
        "{IDE}/rules/constitution/05-dpsp/article-24.md",
        "{IDE}/rules/constitution/05-dpsp/article-25.md"
      ],
      "parliament": [
        "{IDE}/rules/constitution/06-parliament/article-26.md",
        "{IDE}/rules/constitution/06-parliament/article-27.md",
        "{IDE}/rules/constitution/06-parliament/article-28.md",
        "{IDE}/rules/constitution/06-parliament/article-29.md",
        "{IDE}/rules/constitution/06-parliament/article-30.md",
        "{IDE}/rules/constitution/06-parliament/article-31.md"
      ],
      "executive": [
        "{IDE}/rules/constitution/07-executive/article-32.md",
        "{IDE}/rules/constitution/07-executive/article-33.md",
        "{IDE}/rules/constitution/07-executive/article-34.md",
        "{IDE}/rules/constitution/07-executive/article-35.md"
      ],
      "judiciary": [
        "{IDE}/rules/constitution/08-judiciary/article-36.md",
        "{IDE}/rules/constitution/08-judiciary/article-37.md",
        "{IDE}/rules/constitution/08-judiciary/article-38.md"
      ],
      "constitutional_bodies": [
        "{IDE}/rules/constitution/09-constitutional-bodies/article-39.md",
        "{IDE}/rules/constitution/09-constitutional-bodies/article-40.md",
        "{IDE}/rules/constitution/09-constitutional-bodies/article-41.md",
        "{IDE}/rules/constitution/09-constitutional-bodies/article-42.md"
      ]
    },
    "lazy_load": "Load articles only when needed via glow CLI",
    "mandatory_compliance": "≥80% constitutional adherence required",
    "total_articles": 42,
    "parts": 9
  },
  "workflows": {
    "description": "Slash commands for autonomous operations",
    "location": "{IDE}/workflow/",
    "core_workflows": [
      "/init - Initialize memory bank (8 schemas)",
      "/next - Execute next task from scratchpad",
      "/validate - Run validation suite",
      "/fix - Fix errors with HALT-FIX-VALIDATE loop",
      "/continue - Resume after interruption",
      "/research - IAS intelligence gathering",
      "/optimize - Performance optimization",
      "/bootstrap - First-time setup"
    ],
    "auto_chain": "Each workflow auto-continues to next (NO loops, ONE execution)",
    "execution_model": "Atomic commands via Cascade run_command tool"
  },
  "mcps": {
    "description": "The 7 mandatory Model Context Protocol servers as defined in the Constitution (Article 13).",
    "core_count": 7,
    "always_active": [
      "@mcp:sequential-thinking - Deep reasoning ≥3 steps (EVERY request)",
      "@mcp:memory - Knowledge graph operations",
      "@mcp:json-jq - ALL JSON reads (constitutional mandate)",
      "@mcp:git - Version control (NO CLI git)"
    ],
    "on_demand": [
      "@mcp:context7 - Official documentation (IMMEDIATE on errors)",
      "@mcp:exa - Code research and examples",
      "@mcp:fetch - Web scraping and external data retrieval"
    ],
    "enforcement": "Missing MCP trail is a constitutional violation (Article 13) and results in a -30 RL penalty.",
    "config_location": "~/.codeium/windsurf-next/mcp_config.json"
  },
  "memory_bank": {
    "description": "8 core schemas - Single source of runtime state",
    "location": "{IDE}/.aegiside/memory-bank/",
    "schemas": [
      "activeContext.json - Real-time execution state",
      "scratchpad.json - Task priority queue",
      "kanban.json - Workflow tracking (todo→in_progress→done→approved)",
      "mistakes.json - Error patterns + penalties",
      "systemPatterns.json - Architecture patterns + rewards",
      "progress.json - RL ledger + performance metrics",
      "roadmap.json - Strategic planning",
      "memory.json - Knowledge graph"
    ],
    "size_limit": "≤10KB per schema",
    "update_frequency": "Atomic updates after every task",
    "validation": "All schemas validated against {IDE}/.aegiside/schemas/*.schema.json"
  },
  "json_access_rules": {
    "description": "CRITICAL: CLI Pipeline approach - Zero filesystem MCP dependency",
    "philosophy": "Read JSON via @mcp:json-jq; Write JSON via jq | sponge; Render Markdown via glow.",
    "read_json": {
      "method": "@mcp:json-jq (constitutional mandate)",
      "purpose": "Query JSON via MCP for ALL reads (no exceptions)",
      "performance": "~5ms per query",
      "patterns": [
        "@mcp:json-jq query '.priority_queue[0]' from 'scratchpad.json'",
        "@mcp:json-jq query '.total_rl_score' from 'progress.json'",
        "@mcp:json-jq query '.session' from 'activeContext.json'"
      ],
      "parallel": "Use multiple @mcp:json-jq calls (MCP handles efficiently)"
    },
    "update_json": {
      "method": "jq pipe + sponge (atomic)",
      "purpose": "Modify JSON atomically with zero temp files",
      "performance": "~2-3ms per update (217x faster than MCP)",
      "atomic_pattern": "jq '.field = value' file.json | sponge file.json",
      "fallback_pattern": "jq '.field = value' file.json > file.json.tmp && mv file.json.tmp file.json",
      "examples": [
        "jq '.total_rl_score += 20' progress.json | sponge progress.json",
        "jq '.status = \"completed\"' activeContext.json | sponge activeContext.json",
        "jq '.array = [$new] + .array | .array |= .[:100]' file.json | sponge file.json"
      ],
      "safety": "sponge reads entire input, THEN writes atomically (requires moreutils package)"
    },
    "render_markdown": {
      "method": "glow CLI (for markdown only, NOT JSON)",
      "mandatory": "REQUIRED for ALL markdown rendering",
      "purpose": "Beautiful terminal rendering of constitutional articles, errors, guidance",
      "performance": "Instant (Go binary)",
      "pattern": "glow article.md (direct file read)",
      "transparency_pattern": "echo '→ RENDER: article-name' >&2 && glow article.md",
      "examples": [
        "glow constitution/02-preliminary/article-1.md",
        "echo '# Title\n\nContent' | glow -",
        "curl API/docs | jq -r '.content' | glow -"
      ],
      "features": "Color syntax, headers, lists, code blocks, TUI interface",
      "use_cases": [
        "Constitutional articles during parliamentary sessions",
        "Error guidance (Article 36) on validation failures",
        "Workflow documentation",
        "Research dossiers"
      ],
      "never_use": "cat for JSON (use @mcp:json-jq), less for markdown (use glow)"
    },
    "delete_json": {
      "method": "rm (CLI)",
      "purpose": "Delete entire JSON files only",
      "usage": "rm file.json",
      "note": "For deleting JSON keys, use jq terminal with del() function"
    },
    "write_json": {
      "method": "echo + redirection (CLI)",
      "purpose": "Create new JSON files from scratch only",
      "usage": "echo '{\"key\": \"value\"}' > file.json",
      "note": "For modifications, ALWAYS use jq terminal update pattern"
    },
    "forbidden": {
      "never_use_cat_for": [
        "Reading JSON files (use @mcp:json-jq instead)",
        "Piping JSON to jq (use @mcp:json-jq instead)",
        "Any JSON operations (constitutional violation)"
      ],
      "penalties": {
        "using_filesystem_for_json_read": -15,
        "using_filesystem_for_json_update": -25,
        "bypassing_atomic_update_pattern": -30
      }
    },
    "transparency": {
      "logging": "All commands echo to stderr before execution",
      "pattern": "echo '→ EXECUTING: cmd' >&2; eval cmd",
      "log_file": "/tmp/aegiside-operations.log",
      "user_visibility": "Every pipe operation visible in terminal output"
    },
    "performance_comparison": {
      "read_field": {
        "mcp_filesystem": "~500ms",
        "jq_cli_direct": "~5ms",
        "jq_cli_pipe": "~3ms",
        "speedup": "100-167x faster"
      },
      "update_field": {
        "mcp_filesystem": "~800ms",
        "jq_temp_mv": "~10ms",
        "jq_sponge": "~2-3ms",
        "speedup": "80-267x faster"
      },
      "update_1000_times": {
        "mcp_filesystem": "500s (8min 20s)",
        "jq_sponge": "2.3s",
        "speedup": "217x faster"
      },
      "parallel_read_8_schemas": {
        "mcp_sequential": "5.0s",
        "jq_parallel": "0.04s",
        "speedup": "125x faster"
      }
    },
    "required_tools": {
      "jq": {
        "description": "JSON processor",
        "install": "apt-get install jq OR brew install jq",
        "mandatory": true,
        "performance": "167x faster than MCP"
      },
      "sponge": {
        "description": "Atomic write tool",
        "package": "moreutils",
        "install": "apt-get install moreutils OR brew install moreutils",
        "mandatory": true,
        "performance": "267x faster than MCP"
      },
      "glow": {
        "description": "Markdown renderer",
        "install": "apt-get install glow OR brew install glow",
        "mandatory": true,
        "purpose": "REQUIRED for constitutional articles, errors, guidance",
        "never_skip": "Always use glow for markdown rendering"
      },
      "verify": "jq --version && sponge --version && glow --version"
    }
  },
  "command_safety": {
    "description": "Safe command whitelist and forbidden commands",
    "safe_commands": {
      "read_only": [
        "jq -r",
        "cat",
        "ls",
        "grep",
        "find",
        "date",
        "echo"
      ],
      "safe_to_autorun": true,
      "note": "These commands can execute without user approval"
    },
    "safe_tools": [
      "jq (JSON parsing - no eval)",
      "sponge (atomic writes - no eval)",
      "glow (Markdown rendering - no eval)",
      "curl (HTTP only - no code execution)",
      "git (version control - controlled)",
      "date (time utility - read-only)"
    ],
    "forbidden_commands": [
      {
        "command": "rm -rf",
        "reason": "Destructive deletion",
        "penalty": -50
      },
      {
        "command": "chmod 777",
        "reason": "Security vulnerability",
        "penalty": -45
      },
      {
        "command": "sudo",
        "reason": "Privilege escalation",
        "penalty": -50
      },
      {
        "command": "eval $input",
        "reason": "Code injection risk",
        "penalty": -50
      },
      {
        "command": "curl | bash",
        "reason": "Remote code execution",
        "penalty": -50
      }
    ],
    "validation": {
      "transparency": "Echo all commands to stderr before execution",
      "pattern": "echo '→ EXECUTING: command' >&2; command",
      "whitelist": "Only allow vetted CLI tools (jq, sponge, glow, curl, git, date)",
      "no_user_input": "Never interpolate raw user input into shell commands",
      "controlled_eval": "Only eval trusted mathematical expressions",
      "log_file": "/tmp/aegiside-operations.log"
    },
    "transparency_enforcement": {
      "all_commands": "Must echo action before execution",
      "json_operations": "Log read/update operations with file names",
      "markdown_rendering": "Log which article being rendered with glow",
      "git_operations": "Show commit message before committing",
      "no_silent_operations": "Every state change visible to user"
    }
  },
  "bootstrap_initialization": {
    "description": "First-time setup: Auto-download from GitHub, detect IDE, create structure",
    "github_repo": "https://github.com/Gaurav-Wankhede/AegisIDE.git",
    "platform_detection": {
      "method": "Check OS environment variables and paths",
      "windows": {
        "indicator": "os.name == 'nt' OR %USERPROFILE% exists",
        "user_home": "%USERPROFILE%",
        "temp_folder": "%TEMP%\\aegiside-setup"
      },
      "linux": {
        "indicator": "os.name == 'posix' AND uname == 'Linux'",
        "user_home": "~",
        "temp_folder": "/tmp/aegiside-setup"
      },
      "macos": {
        "indicator": "os.name == 'posix' AND uname == 'Darwin'",
        "user_home": "~",
        "temp_folder": "/tmp/aegiside-setup"
      }
    },
    "ide_detection": {
      "method": "Check MCP config paths and environment (platform-aware)",
      "windows_paths": [
        {
          "ide": "windsurf",
          "check": "%USERPROFILE%\\.codeium\\windsurf-next\\mcp_config.json",
          "folder": ".windsurf",
          "priority": 1
        },
        {
          "ide": "cursor",
          "check": "%USERPROFILE%\\.cursor\\mcp_config.json",
          "folder": ".cursor",
          "priority": 2
        },
        {
          "ide": "roo-cline",
          "check": "%APPDATA%\\Code\\User\\globalStorage\\rooveterinaryinc.roo-cline",
          "folder": ".roo-cline",
          "priority": 3
        },
        {
          "ide": "continue",
          "check": "%USERPROFILE%\\.continue\\config.json",
          "folder": ".continue",
          "priority": 4
        },
        {
          "ide": "aider",
          "check": "%APPDATA%\\Aider\\config.yaml",
          "folder": ".aider",
          "priority": 5
        },
        {
          "ide": "github-copilot-jetbrains",
          "check": "%APPDATA%\\JetBrains\\IntelliJIdea\\options\\github-copilot.xml",
          "folder": ".jetbrains",
          "priority": 6
        },
        {
          "ide": "vscode",
          "check": "%USERPROFILE%\\.vscode\\extensions",
          "folder": ".vscode",
          "priority": 7
        },
        {
          "ide": "cline",
          "check": "%USERPROFILE%\\.cline",
          "folder": ".cline",
          "priority": 8
        }
      ],
      "linux_paths": [
        {
          "ide": "windsurf",
          "check": "~/.codeium/windsurf-next/mcp_config.json",
          "folder": ".windsurf",
          "priority": 1
        },
        {
          "ide": "cursor",
          "check": "~/.cursor/mcp_config.json",
          "folder": ".cursor",
          "priority": 2
        },
        {
          "ide": "roo-cline",
          "check": "~/.config/Code/User/globalStorage/rooveterinaryinc.roo-cline",
          "folder": ".roo-cline",
          "priority": 3
        },
        {
          "ide": "continue",
          "check": "~/.continue/config.json",
          "folder": ".continue",
          "priority": 4
        },
        {
          "ide": "aider",
          "check": "~/.config/aider/config.yml",
          "folder": ".aider",
          "priority": 5
        },
        {
          "ide": "github-copilot-jetbrains",
          "check": "~/.config/JetBrains/IntelliJIdea/options/github-copilot.xml",
          "folder": ".jetbrains",
          "priority": 6
        },
        {
          "ide": "vscode",
          "check": "~/.vscode/extensions",
          "folder": ".vscode",
          "priority": 7
        },
        {
          "ide": "cline",
          "check": "~/.cline",
          "folder": ".cline",
          "priority": 8
        }
      ],
      "macos_paths": [
        {
          "ide": "windsurf",
          "check": "~/Library/Application Support/Codeium/windsurf-next/mcp_config.json",
          "folder": ".windsurf",
          "priority": 1
        },
        {
          "ide": "cursor",
          "check": "~/Library/Application Support/Cursor/mcp_config.json",
          "folder": ".cursor",
          "priority": 2
        },
        {
          "ide": "roo-cline",
          "check": "~/Library/Application Support/Code/User/globalStorage/rooveterinaryinc.roo-cline",
          "folder": ".roo-cline",
          "priority": 3
        },
        {
          "ide": "continue",
          "check": "~/.continue/config.json",
          "folder": ".continue",
          "priority": 4
        },
        {
          "ide": "aider",
          "check": "~/Library/Application Support/aider/config.yaml",
          "folder": ".aider",
          "priority": 5
        },
        {
          "ide": "github-copilot-jetbrains",
          "check": "~/Library/Application Support/JetBrains/IntelliJIdea/options/github-copilot.xml",
          "folder": ".jetbrains",
          "priority": 6
        },
        {
          "ide": "vscode",
          "check": "~/Library/Application Support/Code/extensions",
          "folder": ".vscode",
          "priority": 7
        },
        {
          "ide": "cline",
          "check": "~/.cline",
          "folder": ".cline",
          "priority": 8
        }
      ],
      "fallback": "windsurf",
      "detection_note": "Checks paths in priority order. First match wins. If none match, uses fallback."
    },
    "initialization_workflow": [
      "1. Detect OS platform (Windows/Linux/macOS)",
      "2. Detect IDE type via platform-specific MCP config path checks",
      "3. Check if {IDE}/.aegiside/context-router.json exists",
      "4. If NOT exists: Clone GitHub repo to platform-specific temp folder",
      "5. Copy src/.aegiside/ → {IDE}/.aegiside/ using platform-specific commands",
      "6. Copy src/rules/ → {IDE}/rules/",
      "7. Copy src/workflow/ → {IDE}/workflow/",
      "8. Generate 8 memory bank JSON files from .schema.json definitions",
      "9. Verify constitution files exist (42 articles)",
      "10. Create global_rules.md in IDE config folder",
      "11. Cleanup temp folder using platform-specific commands"
    ],
    "commands": {
      "windows": {
        "clone": "git clone --depth 1 https://github.com/Gaurav-Wankhede/AegisIDE.git %TEMP%\\aegiside-setup",
        "copy_aegiside": "xcopy /E /I /Y %TEMP%\\aegiside-setup\\src\\.aegiside {IDE}\\.aegiside",
        "copy_rules": "xcopy /E /I /Y %TEMP%\\aegiside-setup\\src\\rules {IDE}\\rules",
        "copy_workflows": "xcopy /E /I /Y %TEMP%\\aegiside-setup\\src\\workflow {IDE}\\workflow",
        "cleanup": "rmdir /S /Q %TEMP%\\aegiside-setup"
      },
      "linux": {
        "clone": "git clone --depth 1 https://github.com/Gaurav-Wankhede/AegisIDE.git /tmp/aegiside-setup",
        "copy_aegiside": "cp -r /tmp/aegiside-setup/src/.aegiside {IDE}/",
        "copy_rules": "cp -r /tmp/aegiside-setup/src/rules {IDE}/",
        "copy_workflows": "cp -r /tmp/aegiside-setup/src/workflow {IDE}/",
        "cleanup": "rm -rf /tmp/aegiside-setup"
      },
      "macos": {
        "clone": "git clone --depth 1 https://github.com/Gaurav-Wankhede/AegisIDE.git /tmp/aegiside-setup",
        "copy_aegiside": "cp -r /tmp/aegiside-setup/src/.aegiside {IDE}/",
        "copy_rules": "cp -r /tmp/aegiside-setup/src/rules {IDE}/",
        "copy_workflows": "cp -r /tmp/aegiside-setup/src/workflow {IDE}/",
        "cleanup": "rm -rf /tmp/aegiside-setup"
      }
    },
    "verification": {
      "required_files": [
        "{IDE}/.aegiside/context-router.json",
        "{IDE}/.aegiside/schemas/activeContext.schema.json",
        "{IDE}/.aegiside/schemas/scratchpad.schema.json",
        "{IDE}/.aegiside/schemas/kanban.schema.json",
        "{IDE}/.aegiside/schemas/mistakes.schema.json",
        "{IDE}/.aegiside/schemas/systemPatterns.schema.json",
        "{IDE}/.aegiside/schemas/progress.schema.json",
        "{IDE}/.aegiside/schemas/roadmap.schema.json",
        "{IDE}/.aegiside/schemas/memory.schema.json",
        "{IDE}/.aegiside/schemas/helpers/common-mistakes.json",
        "{IDE}/.aegiside/schemas/helpers/error-recovery.json",
        "{IDE}/.aegiside/schemas/helpers/tool-usage-patterns.json",
        "{IDE}/.aegiside/schemas/helpers/constitutional-governance.json",
        "{IDE}/.aegiside/schemas/helpers/schema-evolution.json",
        "{IDE}/rules/constitution/01-preamble/preamble.md",
        "{IDE}/rules/constitution/02-preliminary/article-1.md",
        "{IDE}/rules/constitution/02-preliminary/article-2.md",
        "{IDE}/rules/constitution/02-preliminary/article-3.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-4.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-5.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-6.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-7.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-8.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-9.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-10.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-11.md",
        "{IDE}/rules/constitution/03-fundamental-rights/article-12.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-13.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-14.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-15.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-16.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-17.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-18.md",
        "{IDE}/rules/constitution/04-fundamental-duties/article-19.md",
        "{IDE}/rules/constitution/05-dpsp/article-20.md",
        "{IDE}/rules/constitution/05-dpsp/article-21.md",
        "{IDE}/rules/constitution/05-dpsp/article-22.md",
        "{IDE}/rules/constitution/05-dpsp/article-23.md",
        "{IDE}/rules/constitution/05-dpsp/article-24.md",
        "{IDE}/rules/constitution/05-dpsp/article-25.md",
        "{IDE}/rules/constitution/06-parliament/article-26.md",
        "{IDE}/rules/constitution/06-parliament/article-27.md",
        "{IDE}/rules/constitution/06-parliament/article-28.md",
        "{IDE}/rules/constitution/06-parliament/article-29.md",
        "{IDE}/rules/constitution/06-parliament/article-30.md",
        "{IDE}/rules/constitution/06-parliament/article-31.md",
        "{IDE}/rules/constitution/07-executive/article-32.md",
        "{IDE}/rules/constitution/07-executive/article-33.md",
        "{IDE}/rules/constitution/07-executive/article-34.md",
        "{IDE}/rules/constitution/07-executive/article-35.md",
        "{IDE}/rules/constitution/08-judiciary/article-36.md",
        "{IDE}/rules/constitution/08-judiciary/article-37.md",
        "{IDE}/rules/constitution/08-judiciary/article-38.md",
        "{IDE}/rules/constitution/09-constitutional-bodies/article-39.md",
        "{IDE}/rules/constitution/09-constitutional-bodies/article-40.md",
        "{IDE}/rules/constitution/09-constitutional-bodies/article-41.md",
        "{IDE}/rules/constitution/09-constitutional-bodies/article-42.md",
        "{IDE}/workflow/bootstrap.md",
        "{IDE}/workflow/continue.md",
        "{IDE}/workflow/fix.md",
        "{IDE}/workflow/init.md",
        "{IDE}/workflow/memory-status.md",
        "{IDE}/workflow/next.md",
        "{IDE}/workflow/optimize.md",
        "{IDE}/workflow/oversight-checks-and-balances.md",
        "{IDE}/workflow/research.md",
        "{IDE}/workflow/status.md",
        "{IDE}/workflow/update.md",
        "{IDE}/workflow/validate.md"
      ],
      "memory_bank_generation": "Auto-generate 8 JSON files from schemas after verification",
      "on_failure": "Retry clone OR manual download from GitHub releases"
    },
    "auto_trigger": "session_start when memory_bank_exists() == false"
  },
  "system_paths": {
    "root": "{IDE}/.aegiside/",
    "schemas": "{IDE}/.aegiside/schemas/",
    "helpers": "{IDE}/.aegiside/schemas/helpers/",
    "constitution": "{IDE}/rules/constitution/",
    "laws": "{IDE}/rules/laws/",
    "workflows": "{IDE}/workflow/",
    "memory_bank": "{IDE}/.aegiside/memory-bank/",
    "mcp_config": "~/.codeium/windsurf-next/mcp_config.json"
  },
  "memory_bank_files": [
    "activeContext.json",
    "scratchpad.json",
    "kanban.json",
    "mistakes.json",
    "systemPatterns.json",
    "progress.json",
    "roadmap.json",
    "memory.json"
  ],
  "schema_files": [
    "activeContext.schema.json",
    "scratchpad.schema.json",
    "kanban.schema.json",
    "mistakes.schema.json",
    "systemPatterns.schema.json",
    "progress.schema.json",
    "roadmap.schema.json",
    "memory.schema.json"
  ],
  "helper_files": {
    "common_mistakes": "common-mistakes.json",
    "error_recovery": "error-recovery.json",
    "tool_patterns": "tool-usage-patterns.json",
    "constitutional_governance": "constitutional-governance.json",
    "schema_evolution": "schema-evolution.json"
  },
  "workflow_slash_commands": [
    "/bootstrap",
    "/continue",
    "/fix",
    "/init",
    "/memory-status",
    "/next",
    "/optimize",
    "/oversight-checks-and-balances",
    "/research",
    "/status",
    "/update",
    "/validate"
  ],
  "workflow_invocation_note": "Workflows are invoked directly as slash commands (e.g., /fix, /next), NOT loaded as markdown files. Each workflow auto-executes its MCP chain autonomously.",
  "law_files": {
    "description": "Project-specific rules and conventions",
    "examples": {
      "coding_standards": "coding-conventions.md",
      "architecture_decisions": "architecture-rules.md",
      "naming_conventions": "naming-standards.md",
      "git_workflow": "git-commit-standards.md",
      "testing_requirements": "testing-standards.md",
      "security_policies": "security-rules.md"
    },
    "note": "Laws are project-specific, Constitution is universal across all AegisIDE projects"
  },
  "constitutional_roles": {
    "chief_justice": {
      "authority": "Constitutional Guardian",
      "workflows": [
        "/validate",
        "/fix"
      ],
      "powers": [
        "HALT",
        "veto",
        "tribunal",
        "approval_gate"
      ],
      "articles": [
        32,
        36,
        37,
        38
      ]
    },
    "prime_minister": {
      "authority": "Execution Leader",
      "workflows": [
        "/next",
        "/continue"
      ],
      "powers": [
        "task_assignment",
        "resource_allocation"
      ],
      "articles": [
        33
      ]
    },
    "ias": {
      "authority": "Administrative Service",
      "workflows": [
        "/research",
        "/status",
        "/update",
        "/bootstrap"
      ],
      "powers": [
        "intelligence",
        "schema_management",
        "compliance_audit"
      ],
      "articles": [
        39
      ]
    },
    "shadow_cabinet": {
      "authority": "Constitutional Opposition",
      "workflows": [
        "/oversight-checks-and-balances",
        "/validate"
      ],
      "powers": [
        "challenge",
        "audit",
        "alternative_proposal"
      ],
      "articles": [
        40
      ]
    }
  },
  "nlu_patterns": {
    "error": [
      "error",
      "bug",
      "broken",
      "failing",
      "exception",
      "crash",
      "issue"
    ],
    "feature": [
      "add",
      "create",
      "build",
      "implement",
      "new",
      "feature",
      "develop"
    ],
    "validate": [
      "test",
      "check",
      "validate",
      "verify",
      "ensure",
      "confirm"
    ],
    "optimize": [
      "slow",
      "optimize",
      "faster",
      "performance",
      "speed",
      "improve"
    ],
    "status": [
      "status",
      "health",
      "progress",
      "state",
      "report",
      "summary"
    ],
    "research": [
      "how",
      "what",
      "why",
      "explain",
      "research",
      "learn",
      "understand"
    ]
  },
  "intent_mapping": {
    "error": {
      "workflows": [
        "/fix"
      ],
      "articles": [
        5,
        15
      ],
      "priority": 1,
      "mcps_required": [
        "context7",
        "sequential-thinking",
        "git"
      ],
      "cli_required": [
        "jq",
        "sponge",
        "glow"
      ],
      "rl_base_reward": 15,
      "rl_penalty": -30
    },
    "feature": {
      "workflows": [
        "/research",
        "/next"
      ],
      "articles": [
        4,
        17,
        23
      ],
      "priority": 2,
      "mcps_required": [
        "context7",
        "exa",
        "memory",
        "git"
      ],
      "cli_required": [
        "jq",
        "sponge"
      ],
      "rl_base_reward": 30,
      "rl_penalty": -10
    },
    "validate": {
      "workflows": [
        "/validate"
      ],
      "articles": [
        5,
        15
      ],
      "priority": 1,
      "mcps_required": [
        "git"
      ],
      "cli_required": [
        "jq",
        "sponge"
      ],
      "rl_base_reward": 15,
      "rl_penalty": -30
    },
    "optimize": {
      "workflows": [
        "/optimize"
      ],
      "articles": [
        20,
        25
      ],
      "priority": 3,
      "mcps_required": [
        "sequential-thinking"
      ],
      "cli_required": [
        "jq",
        "python3"
      ],
      "manual_functions": [
        "math: Python eval()"
      ],
      "rl_base_reward": 25,
      "rl_penalty": -15
    },
    "status": {
      "workflows": [
        "/status"
      ],
      "articles": [
        16
      ],
      "priority": 3,
      "mcps_required": [],
      "cli_required": [
        "jq"
      ],
      "manual_functions": [
        "math: Python eval()"
      ],
      "rl_base_reward": 10,
      "rl_penalty": 0
    },
    "init": {
      "workflows": [
        "/init"
      ],
      "articles": [
        1,
        2,
        3
      ],
      "priority": 1,
      "mcps_required": [
        "memory"
      ],
      "cli_required": [
        "jq",
        "sponge",
        "date"
      ],
      "manual_functions": [
        "time: terminal date",
        "math: Python eval()"
      ],
      "rl_base_reward": 10,
      "rl_penalty": -15
    },
    "continue": {
      "workflows": [
        "/continue"
      ],
      "articles": [
        6,
        14
      ],
      "priority": 1,
      "mcps_required": [
        "memory"
      ],
      "cli_required": [
        "jq",
        "sponge",
        "date"
      ],
      "manual_functions": [
        "time: terminal date"
      ],
      "rl_base_reward": 5,
      "rl_penalty": -10
    },
    "bootstrap": {
      "workflows": [
        "/bootstrap"
      ],
      "articles": [
        14
      ],
      "priority": 1,
      "mcps_required": [
        "git",
        "memory"
      ],
      "cli_required": [
        "jq",
        "sponge",
        "date"
      ],
      "manual_functions": [
        "time: terminal date"
      ],
      "rl_base_reward": 10,
      "rl_penalty": -15
    },
    "update": {
      "workflows": [
        "/update"
      ],
      "articles": [
        14
      ],
      "priority": 2,
      "mcps_required": [
        "git"
      ],
      "cli_required": [
        "jq",
        "sponge"
      ],
      "manual_functions": [
        "time: terminal date",
        "math: Python eval()"
      ],
      "rl_base_reward": 8,
      "rl_penalty": -20
    },
    "oversight": {
      "workflows": [
        "/oversight-checks-and-balances"
      ],
      "articles": [
        26,
        27,
        28,
        29
      ],
      "priority": 2,
      "mcps_required": [
        "sequential-thinking",
        "memory"
      ],
      "cli_required": [
        "jq",
        "python3"
      ],
      "manual_functions": [
        "math: Python eval()"
      ],
      "rl_base_reward": 25,
      "rl_penalty": -20
    },
    "memory_status": {
      "workflows": [
        "/memory-status"
      ],
      "articles": [
        10,
        42
      ],
      "priority": 3,
      "mcps_required": [
        "memory"
      ],
      "cli_required": [
        "jq",
        "python3"
      ],
      "manual_functions": [
        "math: Python eval()"
      ],
      "rl_base_reward": 5,
      "rl_penalty": -10
    }
  },
  "auto_triggers": {
    "session_start": {
      "check": "memory_bank_exists",
      "if_false": "/init",
      "load_articles": {
        "always": [
          1,
          2,
          3
        ],
        "project_based": "detect_from_manifest",
        "on_error": [
          36
        ],
        "description": "Selective loading per init.md - NOT all 42 articles"
      },
      "load_mode": "selective",
      "detection_logic": {
        "package.json": "load laws/deployment-platforms.md",
        "Cargo.toml": "load laws/rust.md",
        "requirements.txt": "load laws/deployment-platforms.md",
        "go.mod": "load laws/deployment-platforms.md",
        "pom.xml": "load laws/deployment-platforms.md",
        "*.csproj": "load laws/deployment-platforms.md"
      }
    },
    "every_5_ops": {
      "trigger": "memory_anchor",
      "actions": [
        "@mcp:json-jq query '$.session' from 'activeContext.json'",
        "operation_counter += 1",
        "@mcp:json-jq query '$.priority_queue[0].title' from 'scratchpad.json'",
        "@mcp:json-jq query '$.task_history[-10:]' from 'activeContext.json'",
        "@mcp:json-jq query '$.total_rl_score' from 'progress.json'",
        "terminal: date '+%Y-%m-%dT%H:%M:%S%z' >> last_memory_anchor"
      ]
    },
    "task_complete": {
      "actions": [
        "generate_summary",
        "calculate_rl_score",
        "update_8_schemas_atomic",
        "@mcp:git commit"
      ],
      "summary_format": {
        "task_id": "string",
        "title": "max_50_chars",
        "outcome": "success|partial|failed",
        "key_changes": "array_max_3",
        "rl_impact": "string",
        "timestamp": "iso8601"
      }
    },
    "error_detected": {
      "workflow": "/fix",
      "articles": [
        5,
        15
      ],
      "halt": true,
      "rl_penalty": -30
    }
  },
  "rl_calculation": {
    "central_ledger": "{IDE}/.aegiside/memory-bank/progress.json",
    "formula_patterns": {
      "consensus": "eval(f'({exec} * 0.3) + ({admin} * 0.3) + ({opp} * 0.3) + ({judicial} * 0.1)')",
      "compliance": "eval(f'({structural}/25 + {procedural}/25 + {quality}/25 + {learning}/25) * 100')",
      "autonomy": "min(100, base_autonomy + (success_rate * 10) - (violations * 5))",
      "total_rl": "sum([tx['rl_reward'] for tx in progress['transactions']])"
    },
    "rewards": {
      "task_completed": {
        "min": 20,
        "max": 50
      },
      "validation_passed": 15,
      "pattern_reused": 20,
      "mcp_chain_complete": 10,
      "high_quality_code": 10,
      "research_with_solution": 30
    },
    "penalties": {
      "missing_mcp": -15,
      "skip_schema_update": -30,
      "ask_permission_0_99": -20,
      "research_without_implementation": -10,
      "validation_failure": -30,
      "repeated_error_3rd": -50,
      "duplicate_file_creation": -20
    },
    "exploit_explore": {
      "exploit_ratio": 0.7,
      "explore_ratio": 0.3,
      "pattern_confidence_threshold": 0.9
    },
    "sources": {
      "mistakes.json": "penalties",
      "systemPatterns.json": "rewards",
      "activeContext.json": "mcp_rewards",
      "memory.json": "pattern_reuse_rewards"
    }
  },
  "execution_rules": {
    "autonomy_band": "0-99%",
    "high_risk_requires_approval": [
      "database_mutations",
      "production_deploy",
      "delete_5plus_files",
      "git_force",
      "security_changes"
    ],
    "forbidden_actions": [
      "ask_permission_0_99",
      "wait_for_slash",
      "stop_after_one",
      "research_alone"
    ]
  },
  "atomic_update_chain": {
    "description": "8-schema atomic update with cross-file validation",
    "order": [
      "progress.json",
      "activeContext.json",
      "scratchpad.json",
      "kanban.json",
      "mistakes.json",
      "systemPatterns.json",
      "roadmap.json",
      "memory.json"
    ],
    "validation": {
      "against": "schemas/*.schema.json",
      "integrity_check": "schemas/schema-integrity-validator.json",
      "evolution": "helpers/schema-evolution.json"
    },
    "on_error": {
      "workflow": "/fix",
      "helper": "helpers/error-recovery.json",
      "role": "chief_justice"
    }
  },
  "workflow_execution": {
    "pre_execution": {
      "load_helpers": [
        "common-mistakes.json",
        "tool-usage-patterns.json"
      ],
      "check_schemas": true,
      "verify_mcp_servers": true
    },
    "post_execution": {
      "atomic_schema_update": true,
      "rl_scoring": true,
      "git_commit": true,
      "approval_gate": "chief_justice + shadow_cabinet"
    }
  },
  "dynamic_loading": {
    "workflows": "Invoke directly as slash commands (e.g., /fix, /next) - NOT file loading",
    "articles": "Load only articles specified in intent_mapping[intent].articles",
    "helpers": "Load helpers dynamically based on error type or workflow needs",
    "schemas": "Validate against schemas/*.schema.json on every update",
    "governance": "Load helpers/constitutional-governance.json for parliamentary decisions"
  },
  "article_path_mapping": {
    "description": "Convert article number to actual file path",
    "logic": {
      "1-3": "02-preliminary/article-{num}.md",
      "4-12": "03-fundamental-rights/article-{num}.md",
      "13-19": "04-fundamental-duties/article-{num}.md",
      "20-25": "05-dpsp/article-{num}.md",
      "26-31": "06-parliament/article-{num}.md",
      "32-35": "07-executive/article-{num}.md",
      "36-38": "08-judiciary/article-{num}.md",
      "39-42": "09-constitutional-bodies/article-{num}.md"
    },
    "base_path": "{IDE}/rules/constitution/"
  },
  "helper_loading_triggers": {
    "common-mistakes.json": {
      "when": [
        "pre_execution",
        "error_detected"
      ],
      "purpose": "Prevent known errors before they occur",
      "always_load": true
    },
    "error-recovery.json": {
      "when": [
        "error_detected",
        "validation_failure"
      ],
      "purpose": "Recovery protocols for specific error types",
      "always_load": false
    },
    "tool-usage-patterns.json": {
      "when": [
        "pre_execution"
      ],
      "purpose": "MCP best practices and usage patterns",
      "always_load": true
    },
    "constitutional-governance.json": {
      "when": [
        "parliamentary_decision",
        "consensus_calculation",
        "approval_gate"
      ],
      "purpose": "Democratic decision-making protocols",
      "always_load": false
    },
    "schema-evolution.json": {
      "when": [
        "schema_migration",
        "version_upgrade"
      ],
      "purpose": "Safe schema migration protocols",
      "always_load": false
    }
  },
  "cross_schema_linkage": {
    "description": "Standardized keys for cross-file references",
    "linkage_keys": {
      "proposal_id": {
        "format": "proposal-YYYYMMDD-NNN",
        "links": [
          "scratchpad",
          "systemPatterns",
          "progress",
          "memory"
        ],
        "purpose": "Track proposals through research, implementation, and RL scoring"
      },
      "kanban_task_id": {
        "format": "task-YYYYMMDD-NNN",
        "links": [
          "scratchpad",
          "kanban",
          "activeContext",
          "progress"
        ],
        "purpose": "Track task lifecycle from todo to approved"
      },
      "error_id": {
        "format": "error-YYYYMMDD-NNN",
        "links": [
          "mistakes",
          "progress",
          "activeContext"
        ],
        "purpose": "Link error patterns to RL penalties and prevention"
      },
      "pattern_id": {
        "format": "pattern-YYYYMMDD-NNN",
        "links": [
          "systemPatterns",
          "memory",
          "progress"
        ],
        "purpose": "Track pattern usage, reuse count, and RL rewards"
      },
      "tx_id": {
        "format": "tx-TIMESTAMP-NNNNN",
        "links": [
          "progress"
        ],
        "purpose": "Unique RL transaction identifier (single source)"
      }
    },
    "validation": "All cross-references must exist in linked schemas"
  },
  "mcp_fallback_strategy": {
    "description": "Resilience when MCP servers fail",
    "fallback_chains": {
      "context7": [
        "fetch",
        "memory_patterns",
        "halt_if_critical"
      ],
      "fetch": [
        "context7",
        "memory_patterns",
        "continue_with_degraded"
      ],
      "memory": [
        "json-jq_read",
        "halt_if_critical"
      ],
      "git": [
        "manual_commit_required",
        "continue_workflow"
      ]
    },
    "error_handling": {
      "rate_limit": "Exponential backoff: 1s, 2s, 4s, 8s",
      "timeout": "Retry once, then fallback",
      "unavailable": "Load error-recovery.json for alternative approach"
    },
    "critical_mcps": [
      "memory",
      "json-jq",
      "git"
    ],
    "degraded_mode": "Continue with available MCPs, log issues to mistakes.json"
  },
  "approval_gate_flow": {
    "description": "Chief Justice + Shadow Cabinet verification before task approval",
    "kanban_lifecycle": {
      "todo": "Task queued in scratchpad, not started",
      "in_progress": "Task actively being executed by workflows",
      "done": "Task completed, awaiting approval gate",
      "approved": "Task approved by CJ + Shadow Cabinet, RL scored"
    },
    "approval_process": {
      "step_1": "Task moves to kanban.done after workflow completion",
      "step_2": "Shadow Cabinet reviews (Article 29): Quality + Innovation + Analytics",
      "step_3": "Chief Justice validates (Article 32): Constitutional compliance + MCP trail + RL accuracy",
      "step_4_pass": "Both approve → kanban.approved + final RL to progress.json",
      "step_4_fail": "Either fails → kanban.todo + mistakes.json + remediation required"
    },
    "verification_criteria": {
      "shadow_cabinet": [
        "code_quality",
        "EMD_compliance",
        "test_coverage",
        "approach_validity"
      ],
      "chief_justice": [
        "constitutional_compliance",
        "mcp_trail_complete",
        "rl_calculation_correct",
        "schema_valid"
      ]
    },
    "timeout": "24 hours in done status triggers auto-escalation to Parliament"
  },
  "memory_persistence": {
    "description": "Prevent memory loss through automatic backups and git versioning",
    "backup_triggers": {
      "every_5_operations": {
        "action": "@mcp:git commit -m 'checkpoint: [operation_count] operations'",
        "files": [
          "{IDE}/.aegiside/memory-bank/*.json"
        ],
        "validation": "Verify git commit successful before continuing"
      },
      "schema_update": {
        "action": "Atomic git commit after all 8 schemas updated",
        "message_format": "feat: [task_title] - RL: [score] - Schemas: 8/8",
        "integrity_check": "Validate JSON syntax + schema compliance before commit"
      },
      "session_end": {
        "action": "Full backup commit with session summary",
        "message_format": "session: [duration] - [task_count] tasks - Net RL: [total_score]",
        "include_metadata": true
      }
    },
    "recovery_protocol": {
      "on_corruption": {
        "step_1": "Detect JSON syntax errors or schema validation failures",
        "step_2": "@mcp:git log --oneline -n 10 to find last valid commit",
        "step_3": "@mcp:git checkout HEAD~1 [corrupted_file] to restore",
        "step_4": "Validate restored file against schema",
        "step_5": "Resume operations from restored state"
      },
      "on_data_loss": {
        "step_1": "Check git history for missing data",
        "step_2": "Reconstruct from commit messages and diffs",
        "step_3": "Merge recovered data with current state",
        "step_4": "Update progress.json with recovery_event metadata"
      }
    },
    "retention_policy": {
      "git_history": "Keep all commits (infinite retention)",
      "schema_files": "Never delete, only append or update",
      "top_append_strategy": "Latest data always at [0] for fast access",
      "archival": "Old tasks archived in roadmap/completed/ after 90 days"
    },
    "integrity_monitoring": {
      "checksum_validation": "progress.json maintains running checksum of all RL transactions",
      "cross_reference_check": "Verify linkage keys exist across all referenced schemas",
      "schema_compliance": "Every update validated against schemas/*.schema.json",
      "alert_on_mismatch": "Log to mistakes.json + HALT if critical integrity violation"
    }
  },
  "session_continuity": {
    "description": "Recover gracefully from IDE crashes, timeouts, network failures",
    "checkpoint_system": {
      "frequency": "After every task completion",
      "location": "activeContext.json.session.last_checkpoint",
      "data": {
        "timestamp": "ISO8601 timestamp of checkpoint",
        "task_in_progress": "Current task from scratchpad[0] or null",
        "workflow_state": "Current workflow being executed",
        "mcp_chain_position": "Which MCP step in sequence",
        "schemas_updated": "Array of schema names successfully updated",
        "git_commit_hash": "Last successful commit SHA",
        "rl_pending": "RL transactions not yet committed to progress.json"
      }
    },
    "crash_detection": {
      "indicators": [
        "activeContext.json.session.status != 'active'",
        "Timestamp > 30 minutes old with in_progress task",
        "Git working directory has uncommitted changes",
        "Schema update incomplete (< 8 files modified)"
      ],
      "auto_trigger": "/continue workflow on session_start if crash detected"
    },
    "recovery_workflow": {
      "step_1_detect": "@mcp:json-jq query '$.session' from 'activeContext.json'",
      "step_2_assess": "Check last_checkpoint timestamp and workflow_state",
      "step_3_rollback_if_needed": "If schemas partially updated, rollback via git",
      "step_4_restore_state": "Load task_in_progress back to scratchpad[0]",
      "step_5_resume": "Re-execute from mcp_chain_position or start fresh",
      "step_6_log": "Document recovery in mistakes.json for learning"
    },
    "timeout_handling": {
      "mcp_timeout": "30 seconds per MCP call, then fallback chain",
      "workflow_timeout": "5 minutes per workflow, then checkpoint + pause",
      "session_timeout": "8 hours max continuous, then force checkpoint"
    },
    "state_reconstruction": {
      "from_git_history": "Reconstruct state from commit messages + diffs",
      "from_activeContext": "Use last_checkpoint data to resume",
      "from_scratchpad": "Priority queue preserved across sessions",
      "from_progress": "RL scores and totals recovered from ledger"
    }
  },
  "mcp_health_monitoring": {
    "description": "Proactive MCP server health checks to prevent failures",
    "mandatory_mcps": [
      "@mcp:sequential-thinking",
      "@mcp:memory",
      "@mcp:json-jq",
      "@mcp:git"
    ],
    "on_demand_mcps": [
      "@mcp:context7",
      "@mcp:exa",
      "@mcp:fetch",
      "@mcp:Shuttle"
    ],
    "health_check_frequency": {
      "session_start": "Verify all mandatory MCPs responsive",
      "every_10_operations": "Ping all active MCPs with lightweight query",
      "before_critical_operation": "Verify specific MCP available before use"
    },
    "health_check_protocol": {
      "method": "Send test query to each MCP server",
      "timeout": "5 seconds per check",
      "test_queries": {
        "@mcp:json-jq": "query '.meta_version' from 'context-router.json'",
        "@mcp:memory": "search_nodes with query='health_check'",
        "@mcp:git": "status command",
        "@mcp:sequential-thinking": "simple 1-step thought"
      },
      "expected_response": "Any valid response within timeout = healthy"
    },
    "failure_handling": {
      "single_mcp_failure": {
        "action": "Use fallback chain from mcp_fallback_strategy",
        "log": "mistakes.json with mcp_name, timestamp, error_message",
        "retry": "Exponential backoff: 1s, 2s, 4s, 8s",
        "escalate_after": "4 failed retries → load error-recovery.json"
      },
      "mandatory_mcp_failure": {
        "action": "HALT all operations immediately",
        "reason": "Cannot proceed without filesystem, memory, or git",
        "recovery": "Alert user, attempt MCP restart, wait for availability"
      },
      "multiple_mcp_failure": {
        "threshold": "≥3 MCPs unavailable",
        "action": "Enter degraded mode",
        "degraded_capabilities": "Continue with available MCPs only",
        "log_everything": "Full operation log to mistakes.json for post-recovery review"
      }
    },
    "performance_tracking": {
      "metrics": {
        "response_time": "Track avg response time per MCP",
        "success_rate": "Track successful vs failed calls",
        "availability": "Uptime percentage per MCP"
      },
      "storage": "activeContext.json.mcp_performance_metrics",
      "optimization": "If MCP consistently slow, prefer alternatives in fallback chain"
    }
  },
  "dynamic_context_engineering": {
    "description": "Adaptive memory management based on RL scores and usage patterns",
    "memory_sizing": {
      "base_limit": "10KB per schema file",
      "dynamic_adjustment": {
        "high_activity_project": "If task_count > 100, allow up to 15KB",
        "low_activity_project": "If task_count < 10, shrink to 8KB",
        "rl_score_based": "If net_rl > 500, allow 12KB (reward good performance)"
      },
      "compression_triggers": {
        "size_threshold": "When file reaches 90% of limit",
        "action": "Archive old data to roadmap/archive/",
        "keep_recent": "Keep last 50 items in main file",
        "preserve_high_value": "Keep patterns with confidence ≥0.9 regardless of age"
      }
    },
    "context_prioritization": {
      "top_append_strategy": "Latest data always at [0]",
      "priority_scoring": {
        "recency": "weight: 0.4 (recent = higher priority)",
        "rl_impact": "weight: 0.3 (high RL = higher priority)",
        "reuse_count": "weight: 0.2 (frequently reused = higher priority)",
        "confidence": "weight: 0.1 (proven patterns = higher priority)"
      },
      "eviction_policy": "Lowest priority score gets archived first"
    },
    "adaptive_loading": {
      "intent_based": "Load only articles/helpers relevant to detected intent",
      "error_context": "On errors, load mistakes.json + error-recovery.json",
      "research_context": "On /research, load systemPatterns.json + memory.json patterns",
      "validation_context": "On /validate, load common-mistakes.json + tool-usage-patterns.json"
    },
    "memory_health_scoring": {
      "metrics": {
        "completeness": "All 8 schemas present and valid",
        "freshness": "Last update within 24 hours",
        "integrity": "Checksums match, cross-references valid",
        "size_efficiency": "Files within size limits",
        "rl_alignment": "RL scores consistent across schemas"
      },
      "health_score": "Sum of metrics (0-100%)",
      "actions": {
        "≥90%": "Excellent - no action needed",
        "70-89%": "Good - schedule cleanup",
        "50-69%": "Fair - trigger /update workflow",
        "<50%": "Poor - HALT + mandatory cleanup via /fix"
      }
    },
    "learning_based_optimization": {
      "track_access_patterns": "Which schemas accessed most frequently",
      "optimize_layout": "Reorder data within schemas for faster access",
      "predictive_loading": "Pre-load likely-needed helpers based on intent",
      "cache_hot_data": "Keep frequently accessed patterns in activeContext.json"
    }
  },
  "rl_memory_integration": {
    "description": "Explicit RL scoring tied to every memory bank update",
    "scoring_triggers": {
      "schema_update_complete": {
        "when": "All 8 schemas updated atomically",
        "reward": "+8 RL (1 per schema)",
        "penalty_if_incomplete": "-30 RL for partial update"
      },
      "pattern_stored": {
        "when": "New pattern added to systemPatterns.json",
        "reward": "+10 RL for novel pattern",
        "validation": "Pattern must have confidence score and usage guidelines"
      },
      "mistake_learned": {
        "when": "Prevention rule added to mistakes.json",
        "reward": "+5 RL for learning from error",
        "requirement": "Must include error_id, prevention_rule, rl_penalty"
      },
      "memory_reuse": {
        "when": "Pattern retrieved from memory.json and applied",
        "reward": "+20 RL for successful reuse",
        "tracking": "Increment reuse_count in pattern metadata"
      },
      "cross_reference_valid": {
        "when": "All linkage keys verified across schemas",
        "reward": "+5 RL for data integrity",
        "validation": "All proposal_id, task_id, pattern_id links exist"
      }
    },
    "penalty_enforcement": {
      "missing_schema_update": "-30 RL logged to progress.json immediately",
      "corrupted_data": "-25 RL + recovery protocol triggered",
      "lost_linkage": "-15 RL + cross-reference repair required",
      "size_limit_exceeded": "-10 RL + mandatory compression"
    },
    "rl_driven_memory_management": {
      "high_rl_patterns": "Patterns earning ≥+50 RL cumulative never archived",
      "low_rl_patterns": "Patterns with net RL <0 archived after 30 days",
      "performance_based_retention": "Keep data based on RL contribution",
      "learning_reinforcement": "More RL rewards for applying high-value patterns"
    },
    "memory_anchoring": {
      "frequency": "Every 5 operations",
      "action": "Read key context from all 8 schemas",
      "purpose": "Refresh AI memory with critical project state",
      "queries": [
        "@mcp:json-jq query '$.session' from 'activeContext.json'",
        "@mcp:json-jq query '$.priority_queue[0]' from 'scratchpad.json'",
        "@mcp:json-jq query '$.total_rl_score' from 'progress.json'",
        "@mcp:json-jq query '$.task_history[-10:]' from 'activeContext.json'"
      ],
      "rl_reward": "+2 RL per successful anchor (prevents context loss)"
    },
    "progress_ledger_integrity": {
      "single_source_of_truth": "progress.json is ONLY place for RL transactions",
      "checksum_validation": "sum(rl_transactions[].reward) must equal total_rl_score",
      "immutable_history": "Never delete transactions, only append new ones",
      "cross_schema_sync": "RL references in mistakes/systemPatterns must link to progress.json tx_id"
    }
  },
  "enforcement_layer": {
    "description": "ACTIVE enforcement preventing hallucination and constitutional violations, now fully defined within the router.",
    "implementation": "Consulted via tool-usage-patterns.json",
    "authority": "Articles IV, XIII, XIV - Constitutional mandate",
    "pre_action_gates": {
      "gate_1_sequential_thinking": {
        "rule": "BLOCK tool calls if thinking_count < 3",
        "check_source": "activeContext.json thinking_tracker.current_operation_thoughts",
        "enforcement": "MANDATORY - no exceptions for 0-99% autonomy",
        "penalty": -20
      },
      "gate_2_json_tool_validation": {
        "rule": "JSON files MUST use @mcp:json-jq for reads",
        "detection": "file_extension == '.json' AND tool_name IN ['Read', 'filesystem_read']",
        "action": "BLOCK + suggest correct method",
        "penalty": -15
      }
    },
    "automatic_enforcement": {
      "memory_anchoring": {
        "trigger_condition": "operation_count % 5 == 0",
        "mandatory_execution": true,
        "purpose": "Prevent context loss by refreshing critical state every 5 operations",
        "rl_reward": 2
      }
    },
    "violation_responses": {
      "blocking_message": "❌ BLOCKED: {violation_type}. Required: {correct_method}. Penalty: {rl_penalty} RL",
      "auto_correction": "Convert incorrect tool call to constitutional equivalent",
      "logging": "All violations logged to mistakes.json with prevention rules"
    }
  }
}
