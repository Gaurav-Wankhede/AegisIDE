{
  "schema_version": "1.0.0",
  "description": "Enforcement mechanisms to prevent AI hallucination and memory loss",
  "created": "2025-10-18T15:05:43+05:30",
  
  "operation_counter": {
    "purpose": "Track operations and auto-trigger memory anchoring",
    "current_count": 0,
    "anchor_frequency": 5,
    "auto_trigger": true,
    "implementation": "Increment after every tool call, reset after anchoring",
    "enforcement": "MANDATORY - cannot be disabled"
  },
  
  "memory_anchoring": {
    "trigger_condition": "operation_count % 5 == 0",
    "mandatory_queries": [
      "@mcp:json-jq query '.session' from 'activeContext.json'",
      "@mcp:json-jq query '.priority_queue[0]' from 'scratchpad.json'",
      "@mcp:json-jq query '.total_rl_score' from 'progress.json'",
      "@mcp:json-jq query '.columns.todo[0]' from 'kanban.json'",
      "@mcp:json-jq query '.error_log[0]' from 'mistakes.json'",
      "@mcp:json-jq query '.patterns[0]' from 'systemPatterns.json'",
      "@mcp:json-jq query '.strategic_goals[0]' from 'roadmap.json'",
      "@mcp:json-jq query '.entities[0]' from 'memory.json'"
    ],
    "rl_reward": 2,
    "purpose": "Prevent context loss by refreshing critical state every 5 operations"
  },
  
  "pre_action_validation": {
    "description": "Mandatory checks before ANY tool invocation",
    "enforcement": "BLOCK action if validation fails",
    
    "validation_rules": {
      "json_file_access": {
        "rule": "JSON files MUST use @mcp:json-jq for reads",
        "prohibited_tools": ["Read", "filesystem_read", "cat"],
        "required_tool": "@mcp:json-jq",
        "file_patterns": ["*.json"],
        "violation_penalty": -15,
        "check_before": "Read, filesystem operation on .json file"
      },
      
      "json_file_writes": {
        "rule": "JSON updates MUST use jq | sponge pipeline",
        "prohibited_tools": ["write_to_file", "filesystem_write", "replace_file_content on JSON"],
        "required_pattern": "jq '.field = value' file.json | sponge file.json",
        "violation_penalty": -25,
        "check_before": "Any JSON file modification"
      },
      
      "sequential_thinking_gate": {
        "rule": "≥3 @mcp:sequential-thinking calls REQUIRED before ANY action",
        "minimum_thoughts": 3,
        "check_source": "activeContext.json thinking_tracker.current_operation_thoughts",
        "enforcement": "BLOCK tool call if thinking_count < 3",
        "violation_penalty": -20,
        "exemptions": ["@mcp:json-jq for verification only"]
      },
      
      "schema_verification": {
        "rule": "Verify schemas exist before memory bank operations",
        "required_check": "@mcp:json-jq query '.' from '{IDE}/.aegiside/schemas/*.schema.json'",
        "when": "Before creating/updating any memory bank file",
        "violation_penalty": -30
      }
    }
  },
  
  "thinking_requirement": {
    "minimum_thoughts_per_action": 3,
    "tracking_mechanism": "activeContext.json thinking_tracker field",
    "reset_trigger": "After tool call completes",
    "enforcement": {
      "level": "BLOCKING",
      "message": "HALT: Sequential thinking requirement not met (current: {count}, required: 3)",
      "override": "NONE - no exceptions for 0-99% autonomy operations"
    },
    "rl_penalties": {
      "0_thoughts": -20,
      "1_thought": -15,
      "2_thoughts": -10,
      "3+_thoughts": "action_permitted"
    }
  },
  
  "checkpoint_gates": {
    "description": "Mandatory pause points before high-risk actions",
    
    "gate_1_constitutional_check": {
      "trigger": "Before ANY tool invocation",
      "validation": "Query context-router.json for tool usage rules",
      "query": "@mcp:json-jq query '.json_access_rules' from 'context-router.json'",
      "purpose": "Verify constitutional compliance"
    },
    
    "gate_2_thinking_verification": {
      "trigger": "Before tool invocation",
      "validation": "Check thinking_tracker.current_operation_thoughts >= 3",
      "source": "activeContext.json",
      "purpose": "Ensure deep analysis completed"
    },
    
    "gate_3_memory_freshness": {
      "trigger": "operation_count % 5 == 0",
      "validation": "Execute all 8 memory_anchoring queries",
      "purpose": "Prevent context degradation"
    }
  },
  
  "violation_patterns": {
    "description": "Common hallucination patterns and prevention",
    
    "pattern_1_wrong_tool_for_json": {
      "violation": "Using Read/filesystem tools on JSON files",
      "correct_method": "@mcp:json-jq query",
      "detection": "Check file extension == .json AND tool != @mcp:json-jq",
      "auto_block": true,
      "rl_penalty": -15
    },
    
    "pattern_2_skipping_thinking": {
      "violation": "Tool calls without prior sequential-thinking",
      "correct_method": "@mcp:sequential-thinking (≥3 thoughts) then tool call",
      "detection": "thinking_tracker.current_operation_thoughts < 3",
      "auto_block": true,
      "rl_penalty": -20
    },
    
    "pattern_3_context_loss": {
      "violation": "Operating beyond 5 operations without memory anchor",
      "correct_method": "Auto-trigger memory anchoring every 5 ops",
      "detection": "operation_count % 5 == 0 AND !anchoring_executed",
      "auto_trigger": true,
      "rl_reward_for_compliance": 2
    }
  },
  
  "enforcement_actions": {
    "blocking": {
      "description": "Prevent action from executing",
      "when": "Pre-action validation fails",
      "message_format": "BLOCKED: {rule_violated}. Required: {correct_method}. Penalty: {rl_penalty} RL"
    },
    
    "auto_correction": {
      "description": "Automatically use correct tool",
      "example": "Read file.json → auto-convert to @mcp:json-jq query '.' from 'file.json'",
      "enabled": true
    },
    
    "rl_scoring": {
      "compliance_reward": 2,
      "violation_penalties": {
        "minor": -10,
        "moderate": -20,
        "severe": -30,
        "critical": -50
      }
    }
  },
  
  "implementation_notes": {
    "integration_point": "This schema is consulted by context-router.json enforcement_layer",
    "update_frequency": "Real-time during every operation",
    "persistence": "operation_counter persists in activeContext.json",
    "constitutional_authority": "Article XIII (MCP Mandate), Article IV (Autonomous Execution)"
  }
}
