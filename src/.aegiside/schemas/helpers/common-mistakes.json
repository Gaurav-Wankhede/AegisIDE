{
  "schema_version": "1.0.0",
  "last_updated": "2025-10-17T16:11:18+05:30",
  "description": "Common LLM mistakes when calling tools - learned from real failures",
  
  "critical_hallucination_warnings": {
    "filesystem_mcp_does_not_exist": {
      "severity": "CRITICAL",
      "description": "@mcp:filesystem is a HALLUCINATION - this MCP does not exist",
      "reality": "All file operations use CLI tools: jq, sponge, cat, ls, rm, echo, glow",
      "prevention": "NEVER reference @mcp:filesystem in any code or documentation",
      "if_mentioned": "Immediately replace with CLI equivalent",
      "examples": {
        "wrong": "@mcp:filesystem read file.json",
        "correct": "@mcp:json-jq query '.field' from 'file.json' OR cat file.json"
      }
    },
    "only_7_real_mcps": {
      "list": [
        "@mcp:json-jq (JSON read operations)",
        "@mcp:memory (knowledge graph)",
        "@mcp:git (version control)",
        "@mcp:sequential-thinking (reasoning)",
        "@mcp:context7 (official docs)",
        "@mcp:exa (code research)",
        "@mcp:fetch (web scraping)"
      ],
      "enforcement": "Any other @mcp:* reference is a hallucination"
    }
  },
  
  "user_friendly_error_translation": {
    "description": "UX Gap 4 fix: Translate technical errors to plain English for non-technical users",
    "schema_validation_failed": {
      "technical": "Schema validation failed: memory.json line 23: Expected rl_source_ref, got total_rl_score",
      "user_friendly": "Memory system needs repair\n\nProblem: The memory file has incorrect data structure\nWhat happened: An automatic update tried to store data in the wrong place\nImpact: Workflow paused to prevent data corruption\n\nFix available: I can repair this automatically\nRepair? [Y/n]",
      "auto_fix_available": true
    },
    "mcp_connection_failed": {
      "technical": "MCP server connection failed: context7 timeout after 30s",
      "user_friendly": "Documentation search is temporarily unavailable\n\nProblem: Cannot reach the documentation service\nWhat happened: Network timeout or service is down\nImpact: I'll use cached knowledge instead\n\nNo action needed - continuing with backup approach",
      "auto_fix_available": true
    },
    "file_not_found": {
      "technical": "FileNotFoundError: /path/to/file.json",
      "user_friendly": "Required file is missing\n\nProblem: A file I need doesn't exist\nWhat happened: File may have been deleted or moved\nImpact: Current task cannot proceed\n\nI can create this file with default settings\nCreate? [Y/n]",
      "auto_fix_available": true
    },
    "git_conflict": {
      "technical": "Git merge conflict in src/main.rs lines 45-67",
      "user_friendly": "Code conflict detected\n\nProblem: Two different changes to the same code\nWhat happened: Your changes conflict with recent updates\nImpact: Need to choose which version to keep\n\nI can show you the differences and help resolve\nShow conflicts? [Y/n]",
      "auto_fix_available": false
    },
    "validation_error": {
      "technical": "cargo check failed: error[E0425]: cannot find value `user_id`",
      "user_friendly": "Code has an error\n\nProblem: Trying to use a variable that doesn't exist\nVariable: user_id\nImpact: Code won't compile\n\nI found this in official documentation and can fix it\nApply fix? [Y/n]",
      "auto_fix_available": true
    }
  },
  
  
  "critical_mistakes": {
    "stringified_arrays": {
      "severity": "HIGH",
      "description": "Passing JSON string instead of actual array object",
      "examples": [
        {
          "tool": "replace_file_content",
          "wrong": "{\"ReplacementChunks\": \"[{\\\"TargetContent\\\"...}]\"}",
          "correct": "{\"ReplacementChunks\": [{\"TargetContent\": ...}]}",
          "detection": "@mcp:sequential-thinking type validation before call",
          "storage": "@mcp:memory stores pattern to prevent repetition"
        },
        {
          "tool": "mcp3_edit_file",
          "wrong": "{\"edits\": \"[{\\\"oldText\\\"...}]\"}",
          "correct": "{\"edits\": [{\"oldText\": ...}]}",
          "prevention": "Tool schema expects array, not string"
        }
      ],
      "mcp_prevention": {
        "pre_call": "@mcp:memory check if similar mistake logged",
        "validation": "@mcp:sequential-thinking verify parameter types",
        "logging": "jq + sponge update mistakes.json on occurrence"
      }
    },

    "silent_edit_failures": {
      "severity": "CRITICAL",
      "description": "Tool claims success but changes not applied",
      "detection_protocol": [
        "@mcp:git diff immediately after edit",
        "cat file to verify content",
        "@mcp:time timestamp comparison before/after",
        "@mcp:memory log discrepancy for pattern analysis"
      ],
      "common_causes": [
        "TargetContent whitespace mismatch",
        "File encoding issues (UTF-8 vs UTF-16)",
        "Concurrent file access conflicts",
        "Insufficient file permissions"
      ],
      "mandatory_verification": {
        "step_1": "@mcp:git status after ANY file modification",
        "step_2": "ls -la check mtime",
        "step_3": "@mcp:context7 if mismatch, research failure cause"
      }
    },

    "incorrect_edits_without_error": {
      "severity": "CRITICAL",
      "description": "Wrong edit applied silently without error message",
      "examples": [
        {
          "intended": "Replace function name in one location",
          "actual": "Replaced in wrong file or wrong function",
          "cause": "Ambiguous TargetContent match",
          "prevention": "cat read exact context before edit"
        }
      ],
      "recovery": {
        "immediate": "@mcp:git revert HEAD~1",
        "analysis": "@mcp:context7 why wrong match occurred",
        "learning": "@mcp:memory store ambiguous pattern to avoid",
        "retry": "@mcp:sequential-thinking break into precise smaller edits"
      }
    },

    "malformed_edit_errors": {
      "severity": "HIGH",
      "description": "Cascade error: Model produced a malformed edit",
      "root_causes": [
        "Complex TargetContent with special characters",
        "Multi-line strings with inconsistent whitespace",
        "Escaped quotes or backslashes in content",
        "Unicode characters causing encoding issues"
      ],
      "solutions": {
        "simplify": "@mcp:sequential-thinking break into smaller atomic edits",
        "escape": "@mcp:context7 check proper escaping for language",
        "alternative": "Switch to mcp3_write_file for complete rewrites",
        "validation": "@mcp:memory retrieve successful similar edits"
      }
    },

    "tool_not_called": {
      "severity": "MEDIUM",
      "description": "LLM plans to use tool but never calls it",
      "causes": [
        "Tool blacklisted from previous failures",
        "Incorrect tool name in plan vs actual",
        "Conditional logic preventing execution",
        "Context window exhaustion before call"
      ],
      "detection": {
        "monitor": "@mcp:time track time between plan and execution",
        "verify": "@mcp:memory check if tool call logged",
        "alert": "If plan mentions tool but not called within 30 seconds"
      },
      "resolution": {
        "explicit": "State tool call explicitly instead of implicitly",
        "immediate": "Call tool immediately after planning",
        "fallback": "@mcp:sequential-thinking evaluate alternative tools"
      }
    },

    "path_errors": {
      "severity": "MEDIUM",
      "description": "Relative paths instead of absolute, or wrong directory",
      "prevention": {
        "validation": "ls always verify path exists before use",
        "normalization": "Convert relative to absolute with pwd + path",
        "verification": "@mcp:git check working directory before operations"
      },
      "common_patterns": [
        {
          "wrong": "./src/file.ts (relative)",
          "correct": "/absolute/path/to/src/file.ts",
          "tool": "ls or find to get absolute paths"
        }
      ]
    }
  },

  "mcp_usage_patterns": {
    "json_jq_mcp": {
      "purpose": "Read JSON fields from files (memory bank schemas, config files)",
      "correct_usage": [
        "@mcp:json-jq query '$.priority_queue[0]' from 'scratchpad.json'",
        "@mcp:json-jq query '$.session.autonomy_level' from 'activeContext.json'",
        "@mcp:json-jq query '.mcps' from 'context-router.json'"
      ],
      "when_to_use": "Reading specific JSON fields from files",
      "when_not_to_use": "Writing/updating JSON (use jq + sponge CLI instead)",
      "common_mistakes": [
        {
          "wrong": "Using @mcp:json-jq to write JSON",
          "correct": "Use jq + sponge: jq '.field = value' file.json | sponge file.json"
        },
        {
          "wrong": "Reading entire large JSON file",
          "correct": "Query specific field: @mcp:json-jq query '$.specific.field' from 'file.json'"
        }
      ]
    },
    "memory_mcp": {
      "purpose": "Knowledge graph operations (entities, relations, patterns)",
      "correct_usage": [
        "@mcp:memory create_entities with pattern data",
        "@mcp:memory search_nodes with query='error pattern'",
        "@mcp:memory add_observations to existing entities"
      ],
      "integration": "Store all learned patterns for reuse (+20 RL per reuse)"
    },
    "sequential_thinking_mcp": {
      "purpose": "MANDATORY before every action (≥3 thoughts)",
      "correct_usage": "Break down task into validation → execution → verification steps",
      "violation_penalty": "-15 RL if skipped"
    }
  },

  "tool_specific_pitfalls": {
    "replace_file_content": [
      "TargetContent must match EXACTLY including all whitespace",
      "AllowMultiple=false fails if TargetContent appears twice",
      "Large files (>10KB) may cause timeout",
      "Non-ASCII characters require UTF-8 encoding verification"
    ],
    
    "mcp3_write_file": [
      "Overwrites existing files WITHOUT warning",
      "Must create parent directories first",
      "No undo capability - use git before write",
      "Binary files not supported - text only"
    ],

    "run_command": [
      "SafeToAutoRun=true only for read-only commands",
      "Cwd must be absolute path, not relative",
      "Environment variables not inherited automatically",
      "Blocking=false may miss error messages"
    ],

    "grep_search": [
      "IsRegex=true requires escaped special chars",
      "Large repos timeout - use Includes to filter",
      "Case sensitivity can miss matches",
      "Empty results may indicate wrong SearchPath"
    ]
  },

  "rl_computation_examples": {
    "gae_advantage_calculation": {
      "formula": "Adv_t = Σ(γλ)^k × δ_{t+k} where δ_t = r_t + γV(s_{t+1}) - V(s_t)",
      "example": {
        "gamma": 0.99,
        "lambda": 1.0,
        "rewards": [20, 15, 25],
        "values": [15, 18, 22, 28],
        "td_errors": ["20 + 0.99*18 - 15 = 22.82", "15 + 0.99*22 - 18 = 18.78", "25 + 0.99*28 - 22 = 30.72"],
        "gae_advantages": ["22.82 + 0.99*18.78 + 0.99^2*30.72 = 71.73", "18.78 + 0.99*30.72 = 49.19", "30.72"],
        "usage": "Store in progress.json[0].gae_advantage field"
      }
    },
    "td_learning_update": {
      "formula": "V(s_t) ← V(s_t) + α[r_t + γV(s_{t+1}) - V(s_t)]",
      "example": {
        "alpha": 0.1,
        "gamma": 0.99,
        "reward": 20,
        "value_old": 15,
        "value_next": 18,
        "td_error": "20 + 0.99*18 - 15 = 22.82",
        "value_updated": "15 + 0.1*22.82 = 17.28",
        "usage": "Update value_network_branches in progress.json"
      }
    },
    "softmax_policy_selection": {
      "formula": "π(task_i) = exp(Q(task_i)/τ) / Σ_j exp(Q(task_j)/τ)",
      "example": {
        "temperature": 1.0,
        "q_values": {"task_1": 25, "task_2": 18, "task_3": 10},
        "exp_values": {"task_1": "exp(25) = 7.2e10", "task_2": "exp(18) = 6.6e7", "task_3": "exp(10) = 22026"},
        "probabilities": {"task_1": 0.999, "task_2": 0.001, "task_3": 0.0},
        "selected": "task_1",
        "usage": "Store in scratchpad.json task_selection_policy field"
      }
    },
    "monte_carlo_return": {
      "formula": "G_t = Σ(k=0 to T-t) γ^k * r_{t+k}",
      "example": {
        "gamma": 0.99,
        "rewards": [20, 15, 25, 10],
        "returns": ["20 + 0.99*15 + 0.99^2*25 + 0.99^3*10 = 68.56", "15 + 0.99*25 + 0.99^2*10 = 49.54", "25 + 0.99*10 = 34.9", "10"],
        "usage": "Calculate episodic task sequences for long-running workflows"
      }
    },
    "kl_divergence_penalty": {
      "formula": "KL(π_new || π_ref) = Σ π_new(a) log(π_new(a)/π_ref(a))",
      "example": {
        "current_policy": {"task_1": 0.7, "task_2": 0.2, "task_3": 0.1},
        "reference_policy": {"task_1": 0.6, "task_2": 0.3, "task_3": 0.1},
        "kl_calculation": "0.7*log(0.7/0.6) + 0.2*log(0.2/0.3) + 0.1*log(0.1/0.1) = 0.0129",
        "kl_penalty": "0.005 * 0.0129 = 0.0000645",
        "usage": "Store in progress.json[0].kl_divergence, update reference if >0.01"
      }
    },
    "bellman_backup": {
      "formula": "V(s) = r + γ * max_a Q(s', a)",
      "example": {
        "reward": 20,
        "gamma": 0.99,
        "next_q_values": [25, 18, 22],
        "max_q": 25,
        "value_target": "20 + 0.99*25 = 44.75",
        "usage": "Bootstrap value estimates for incomplete tasks"
      }
    }
  },

  "learning_integration": {
    "on_mistake": {
      "immediate": "jq + sponge append to mistakes.json",
      "analysis": "@mcp:context7 research root cause",
      "storage": "@mcp:memory store pattern with metadata",
      "prevention": "@mcp:sequential-thinking add validation step"
    },
    "pattern_recognition": {
      "frequency": "@mcp:math calculate mistake occurrence rate",
      "clustering": "@mcp:memory group similar mistakes",
      "trends": "@mcp:time track if mistakes increasing/decreasing",
      "reporting": "Generate monthly mistake summary for improvement"
    }
  },

  "constitutional_compliance": {
    "article_reference": "Article XV: Tool Usage & Error Prevention",
    "mistake_tolerance": "ZERO - All mistakes must be logged and learned from",
    "enforcement": "System blocks next task until mistake documented via jq"
  }
}
