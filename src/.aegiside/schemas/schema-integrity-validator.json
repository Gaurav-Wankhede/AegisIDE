{
  "schema_version": "1.0.0",
  "last_updated": "2025-10-17T15:50:30+05:30",
  "description": "Cross-schema integrity validation rules to prevent orphaned references and ensure data coherence across 8 core schemas",
  
  "validation_rules": {
    "task_id_consistency": {
      "rule": "task_id referenced in activeContext MUST exist in scratchpad OR kanban",
      "severity": "HIGH",
      "affected_schemas": ["activeContext.json", "scratchpad.json", "kanban.json"],
      "validation_logic": {
        "step_1": "@mcp:filesystem read activeContext.json current_execution.task_id",
        "step_2": "@mcp:filesystem read scratchpad.json priority_queue",
        "step_3": "@mcp:filesystem read kanban.json all columns",
        "step_4": "@mcp:sequential-thinking verify task_id exists in at least one location",
        "on_failure": "HALT and trigger /fix workflow with orphaned_reference error"
      },
      "auto_remediation": {
        "action": "Move task from activeContext to scratchpad[0] with 'orphaned' tag",
        "mcp_chain": ["@mcp:filesystem", "@mcp:memory", "@mcp:git"]
      }
    },

    "roadmap_milestone_linkage": {
      "rule": "roadmap_milestone_id in scratchpad/kanban MUST reference existing roadmap.json strategic_goals",
      "severity": "MEDIUM",
      "affected_schemas": ["scratchpad.json", "kanban.json", "roadmap.json"],
      "validation_logic": {
        "step_1": "@mcp:filesystem read scratchpad.json extract all roadmap_milestone_id",
        "step_2": "@mcp:filesystem read roadmap.json strategic_goals",
        "step_3": "@mcp:math calculate match percentage",
        "on_failure": "Log warning in mistakes.json but allow continuation"
      },
      "auto_remediation": {
        "action": "Create placeholder roadmap goal OR remove invalid milestone references",
        "threshold": "If >3 orphaned references, trigger /status workflow"
      }
    },

    "rl_single_source_enforcement": {
      "rule": "ONLY progress.json stores total_rl_score. All others MUST have rl_source_ref: 'progress.json'",
      "severity": "CRITICAL",
      "affected_schemas": ["activeContext.json", "scratchpad.json", "mistakes.json", "systemPatterns.json", "kanban.json", "roadmap.json", "memory.json"],
      "validation_logic": {
        "step_1": "@mcp:filesystem read all 8 schemas metrics sections",
        "step_2": "@mcp:sequential-thinking verify ONLY progress.json has total_rl_score field",
        "step_3": "@mcp:math count schemas with rl_source_ref = 'progress.json' (should be 7)",
        "on_failure": "HALT immediately - RL architecture violation"
      },
      "auto_remediation": {
        "action": "Remove total_rl_score from non-progress schemas, add rl_source_ref",
        "rollback": "Restore from @mcp:git if corruption detected"
      }
    },

    "top_append_order_verification": {
      "rule": "All arrays MUST have newest entry at [0] - enforce top-append strategy",
      "severity": "HIGH",
      "affected_schemas": ["activeContext.json", "scratchpad.json", "mistakes.json", "systemPatterns.json", "kanban.json", "roadmap.json", "memory.json"],
      "validation_logic": {
        "step_1": "@mcp:filesystem read each schema's array",
        "step_2": "@mcp:time compare timestamps - [0] MUST be most recent",
        "step_3": "@mcp:sequential-thinking verify descending chronological order",
        "on_failure": "Auto-sort array by timestamp descending"
      },
      "auto_remediation": {
        "action": "Re-sort arrays with newest first, update last_updated timestamp",
        "mcp_chain": ["@mcp:filesystem", "@mcp:time", "@mcp:git"]
      }
    },

    "approval_governance_enforcement": {
      "rule": "Tasks in kanban 'approved' column MUST have approval_metadata with all required fields",
      "severity": "CRITICAL",
      "affected_schemas": ["kanban.json"],
      "validation_logic": {
        "step_1": "@mcp:filesystem read kanban.json columns.approved array",
        "step_2": "@mcp:sequential-thinking verify each task has approval_metadata",
        "step_3": "Check: chief_justice_approved=true AND opposition_verified=true AND constitutional_compliance_verified=true",
        "on_failure": "Move task back to 'done' column, trigger Opposition review"
      },
      "auto_remediation": {
        "action": "Initiate /oversight-checks-and-balances workflow for incomplete approvals",
        "notification": "Alert user that constitutional governance was bypassed"
      }
    },

    "mcp_trail_completeness": {
      "rule": "activeContext.json session MUST track all 9 MCP server interactions",
      "severity": "MEDIUM",
      "affected_schemas": ["activeContext.json"],
      "validation_logic": {
        "step_1": "@mcp:filesystem read activeContext.json mcp_integration_state",
        "step_2": "@mcp:math count MCP servers with status entries",
        "step_3": "Required: filesystem, memory, context7, fetch, git, time, math, sequential-thinking, exa",
        "on_failure": "Log missing MCPs in mistakes.json with -15 RL penalty"
      },
      "auto_remediation": {
        "action": "Initialize missing MCP entries with 'not_used_yet' status"
      }
    },

    "schema_size_limit_enforcement": {
      "rule": "All schemas MUST be ≤10KB as per EMD compliance (Article 21)",
      "severity": "HIGH",
      "affected_schemas": ["ALL 8 core schemas"],
      "validation_logic": {
        "step_1": "@mcp:filesystem get_file_info for each schema",
        "step_2": "@mcp:math calculate size in KB",
        "step_3": "Check: size ≤ 10KB (10240 bytes)",
        "on_failure": "HALT and trigger /optimize workflow to trim schemas"
      },
      "auto_remediation": {
        "action": "Trim oldest entries from arrays, archive to separate files",
        "archive_location": "{IDE}/aegiside/memory-bank/archive/",
        "trim_strategy": "Keep most recent 100 entries in arrays"
      }
    },

    "constitutional_compliance_threshold": {
      "rule": "Tasks cannot move to 'approved' unless constitutional_compliance ≥80%",
      "severity": "CRITICAL",
      "affected_schemas": ["kanban.json"],
      "validation_logic": {
        "step_1": "@mcp:filesystem read kanban.json columns.approved",
        "step_2": "@mcp:math verify each task.constitutional_compliance ≥ 80",
        "on_failure": "HALT approval, return task to 'done' for remediation"
      },
      "auto_remediation": {
        "action": "Trigger /validate workflow to improve compliance score",
        "log": "mistakes.json with -30 RL penalty for governance bypass"
      }
    }
  },

  "validation_schedule": {
    "on_schema_update": "Run all applicable rules after atomic 8-schema update",
    "on_task_completion": "Verify task_id_consistency + rl_single_source",
    "on_approval_attempt": "Enforce approval_governance + constitutional_compliance",
    "daily": "Run complete integrity check via /status workflow",
    "on_error": "Immediate validation of affected schemas"
  },

  "mcp_integration": {
    "validation_chain": [
      "@mcp:filesystem (read all schemas)",
      "@mcp:sequential-thinking (analyze relationships)",
      "@mcp:math (calculate consistency scores)",
      "@mcp:time (verify chronological order)",
      "@mcp:memory (store validation patterns)",
      "@mcp:git (commit fixes if auto-remediation applied)"
    ]
  },

  "constitutional_mappings": {
    "description": "Maps schema fields to constitutional articles they implement (Gap 46 fix - 2025-10-17)",
    "mappings": {
      "activeContext.user_controls": ["Article-4: Right to Autonomous Execution"],
      "activeContext.user_feedback": ["Article-8: Right to Communication & Information"],
      "activeContext.autonomy_settings": ["Article-4: Right to Autonomous Execution"],
      "activeContext.mcp_fallback_chain": ["Article-9: Right to Tool Usage & Integration"],
      "activeContext.mcp_rate_limits": ["Article-9: Right to Tool Usage & Integration"],
      "activeContext.mcp_performance_metrics": ["Article-9: Right to Tool Usage & Integration"],
      "activeContext.nlu_analysis": ["Article-8: Right to Communication & Information"],
      "activeContext.workspace_context": ["Article-2: Territory & Jurisdiction"],
      "progress.rl_model_state": ["Article-12: Right to RL & Self-Improvement"],
      "progress.rl_runtime_controls": ["Article-4: Autonomous Execution", "Article-12: RL & Self-Improvement"],
      "progress.reward_breakdown": ["Article-12: Right to RL & Self-Improvement"],
      "progress.value_network_branches": ["Article-12: Right to RL & Self-Improvement"],
      "progress.autonomy_settings": ["Article-4: Right to Autonomous Execution"],
      "progress.notification_preferences": ["Article-8: Right to Communication & Information"],
      "scratchpad.undo_stack": ["Article-4: Right to Autonomous Execution"],
      "memory.json": ["Article-10: Right to Knowledge & Memory Access", "Article-42: Knowledge Graph"],
      "mistakes.json": ["Article-15: Duty to Validate & Test Code"],
      "systemPatterns.json": ["Article-17: Duty to Apply Learned Patterns"],
      "kanban.json": ["Article-29: Opposition Challenge & Review"],
      "roadmap.json": ["Article-33: Prime Minister - Execution Authority"],
      "helpers/schema-evolution.json": ["Article-11: Right to Constitutional Amendment"],
      "helpers/constitutional-governance.json": ["Article-30: Emergency Powers", "Article-37: Tribunals"]
    }
  }
}
