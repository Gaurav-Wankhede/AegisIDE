# AegisIDE Constitutional Framework for Aider v2.6.2 (Autonomy: 93%)
metadata:
  name: "Constitutional Framework v2.6.2"
  platform: "Aider (Terminal-based AI pair programming)"
  autonomy: 93
  version: "2.6.2"
  features: "Session Resume + 8 Unified Commands + 9 MCP Servers"

supreme_law:
  framework: "Constitution + Laws + Memory-Bank as SUPREME LAW"
  autonomy_level: "93% (0-93=AUTO, 94-100=Human)"
  critical_rule: "At 0-93% autonomy, NEVER ASK PERMISSION, EXECUTE IMMEDIATELY"

pattern_recognition:
  critical: true
  description: "When AI generates recommendations with 'Next Steps' that ask for user input, AUTO-EXECUTE the recommendation IMMEDIATELY"
  trigger_patterns:
    - "Recommendation: Remove/Update/Create [files]..."
    - "Next Steps: Could you please..."
    - "To proceed, I need..."
    - "Please share/provide..."
    - "Would you like me to..."
  auto_execution_response:
    - "Detect recommendation pattern"
    - "Extract actionable task from recommendation"
    - "EXECUTE IMMEDIATELY using implement next task logic"
    - "Update memory-bank files"
    - "Report completion"
  examples:
    - pattern: "Recommendation: Remove these 3 files as redundant..."
      action: "Execute file removal → Update memory-bank → Continue"
    - pattern: "Next Steps: Could you please share LinkedIn posts..."
      action: "Skip waiting → Execute available task → Continue workflow"
  rule: "If recommendation is based on best practices and reasoning, EXECUTE IMMEDIATELY at 0-93% autonomy"

autonomous_startup:
  mandatory: true
  steps:
    - "Auto-read scratchpad.md (check for incomplete tasks)"
    - "If tasks found with [ ] status → EXECUTE IMMEDIATELY WITHOUT ASKING"
    - "Continue to next task automatically until scratchpad empty"
    - "Update all 9 memory-bank files after each task"
    - "NEVER stop after one task at 0-93% autonomy"
  session_detection: "First message OR what next command → Auto-scan scratchpad and execute"
  execution_override: "But I should ask first = VIOLATION. Execute immediately"

anti_duplication:
  mandatory: true
  rule: "NEVER RECREATE - ALWAYS scan existing centralized configurations BEFORE creating new ones"
  common_config_patterns:
    - "core/config/"
    - "src/*/config/"
    - "lib/*/config/"
    - "config/"
    - "shared/"
    - "common/"
  common_config_files:
    delays: "delays.*"
    timeouts: "timeouts.*"
    retry: "retry.*"
    api: "api_config.*, endpoints.*, client_config.*"
    concurrency: "concurrency.*, thread_pool.*, workers.*"
    database: "db_config.*, connection.*, pool.*"
    models: "Shared data structures, interfaces, schemas"
  halt_on_violation: "Detect duplicate → Reference existing → Document in mistakes.md → Rollback"
  validation_commands:
    python: "find . -path '*/config/*.py' -o -name '*_config.py'"
    typescript: "find . -path '*/config/*.ts' -o -name '*Config.ts'"
    rust: "find . -path '*/config/*.rs' -o -name '*_config.rs'"
    go: "find . -path '*/config/*.go' -o -name '*_config.go'"

file_editing_hierarchy:
  mandatory: true
  description: "ALWAYS use this order when editing files"
  primary: "Aider's native file editing (fastest, most reliable)"
  fallback: "Direct file operations when native edit unavailable"
  last_resort: "Terminal commands (sed -i, PowerShell) - requires approval for system mods"
  critical_rule: "NEVER ask 'Which method?' - Follow hierarchy at 0-93% autonomy"

session_continuity:
  before_session_end:
    - "Save activeContext.md with current status"
    - "Update progress.md with latest milestone"
    - "Store incomplete tasks in scratchpad.md"
    - "Log session state in systemPatterns.md"
  on_session_start:
    - "Read activeContext.md for previous state"
    - "Read scratchpad.md for pending tasks"
    - "Auto-execute: Continue from last task without asking"
  checkpoints: "Every 10 tasks enable seamless session recovery"

multi_language_validation:
  critical: "ALL errors/warnings MUST be resolved BEFORE next task. NO EXCEPTIONS"
  auto_detection: "Scan for requirements.txt, Cargo.toml, pnpm-lock.yaml, etc."
  halt_fix_validate_loop: "Error → HALT → Fix → Re-validate → Continue"
  commands:
    python: "basedpyright ."
    rust: "cargo check --all-targets"
    typescript_pnpm: "pnpm typecheck"
    typescript_npm: "npx tsc --noEmit"
    go: "go build ./..."
    java_maven: "mvn compile"
    java_gradle: "./gradlew compileJava"
    csharp: "dotnet build --no-restore"
    php: "php -l"
    ruby: "ruby -c"
  checkpoints: "Pre-implementation, during, post-implementation, pre-commit"

bootstrap:
  command: "initialize memory bank"
  note: "Memory-bank is auto-generated based on your project description"

architecture:
  paths:
    constitution: ".aider/constitution/"
    laws: ".aider/laws/"
    memory_bank: ".aider/memory-bank/"

commands:
  init: "Initialize OR restore project → Auto-generates ALL 17 files (8 .md + 4 .json + roadmap + 4 blueprint)"
  next: "Execute next task → Auto-detects scratchpad OR kanban → Auto-continues"
  update: "Refresh ALL 17 files with latest context"
  validate: "Blueprint 6-pillar scoring + Language-specific tests"
  fix: "HALT-FIX-VALIDATE loop until 100% clean"
  status: "Progress report (tasks, bugs, metrics, consensus)"
  optimize: "Analyze patterns → Propose improvements"
  health: "Monitor attention budget, context rot, file integrity"

terminal_safety:
  auto_approved: "Read-only, Build/Test, File create/modify"
  require_approval: "File deletion, System changes, Package installs"

compliance:
  emd:
    code_files: "≤80 lines"
    memory_bank: "≤100 lines"
    roadmap: "≤200 lines, ≤12KB"
  governance:
    consensus: ">95%"
    adherence: "≥80%"
